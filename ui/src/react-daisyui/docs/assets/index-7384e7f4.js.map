{"version":3,"file":"index-7384e7f4.js","sources":["../../src/Modal/ModalActions.tsx","../../src/Modal/ModalBody.tsx","../../src/Modal/ModalHeader.tsx","../../src/Modal/ModalLegacy.tsx","../../src/Modal/Modal.tsx"],"sourcesContent":["import React from 'react'\nimport { twMerge } from 'tailwind-merge'\n\nimport { IComponentBaseProps } from '../types'\n\ntype ModalActionsProps = React.HTMLAttributes<HTMLDivElement> &\n  IComponentBaseProps\n\nconst ModalActions = React.forwardRef<HTMLDivElement, ModalActionsProps>(\n  ({ children, className, ...props }, ref) => {\n    const classes = twMerge('modal-action', className)\n    return (\n      <div {...props} className={classes} ref={ref}>\n        {children}\n      </div>\n    )\n  }\n)\n\nModalActions.displayName = 'ModalActions'\n\nexport default ModalActions\n","import React from 'react'\n\ntype ModalBodyProps = React.HTMLAttributes<HTMLDivElement>\n\nconst ModalBody = React.forwardRef<HTMLDivElement, ModalBodyProps>(\n  ({ children, className, ...props }, ref) => {\n    return (\n      <div {...props} className={className} ref={ref}>\n        {children}\n      </div>\n    )\n  }\n)\n\nModalBody.displayName = 'ModalBody'\n\nexport default ModalBody\n","import React from 'react'\nimport { twMerge } from 'tailwind-merge'\n\ntype ModalHeaderProps = React.HTMLAttributes<HTMLDivElement>\n\nconst ModalHeader = React.forwardRef<HTMLDivElement, ModalHeaderProps>(\n  ({ children, className, ...props }, ref) => {\n    const classes = twMerge('w-full mb-8 text-xl', className)\n    return (\n      <div {...props} className={classes} ref={ref}>\n        {children}\n      </div>\n    )\n  }\n)\n\nModalHeader.displayName = 'ModalHeader'\n\nexport default ModalHeader\n","import React, { forwardRef } from 'react'\nimport clsx from 'clsx'\nimport { twMerge } from 'tailwind-merge'\n\nimport { IComponentBaseProps } from '../types'\n\nexport type ModalProps = React.HTMLAttributes<HTMLDivElement> &\n  IComponentBaseProps & {\n    open?: boolean\n    responsive?: boolean\n    onClickBackdrop?: () => void\n  }\n\nconst Modal = forwardRef<HTMLDivElement, ModalProps>(\n  (\n    {\n      children,\n      open,\n      responsive,\n      onClickBackdrop,\n      dataTheme,\n      className,\n      ...props\n    },\n    ref\n  ): JSX.Element => {\n    const containerClasses = twMerge(\n      'modal',\n      clsx({\n        'modal-open': open,\n        'modal-bottom sm:modal-middle': responsive,\n      })\n    )\n\n    const bodyClasses = twMerge('modal-box', className)\n\n    return (\n      <div\n        aria-label=\"Modal\"\n        aria-hidden={!open}\n        aria-modal={open}\n        data-theme={dataTheme}\n        className={containerClasses}\n        onClick={(e) => {\n          e.stopPropagation()\n          if (e.target === e.currentTarget) {\n            e.stopPropagation()\n            if (onClickBackdrop) {\n              onClickBackdrop()\n            }\n          }\n        }}\n      >\n        <div\n          {...props}\n          data-theme={dataTheme}\n          className={bodyClasses}\n          ref={ref}\n        >\n          {children}\n        </div>\n      </div>\n    )\n  }\n)\n\nModal.displayName = 'Modal'\nexport default Modal\n","import React, { forwardRef, useCallback, useRef } from 'react'\nimport clsx from 'clsx'\nimport { twMerge } from 'tailwind-merge'\n\nimport { IComponentBaseProps } from '../types'\n\nimport ModalActions from './ModalActions'\nimport ModalBody from './ModalBody'\nimport ModalHeader from './ModalHeader'\nimport ModalLegacy, { ModalProps as ModalLegacyProps } from './ModalLegacy'\n\nexport type ModalProps = React.HTMLAttributes<HTMLDialogElement> &\n  IComponentBaseProps & {\n    open?: boolean\n    responsive?: boolean\n    backdrop?: boolean\n  }\n\nconst Modal = forwardRef<HTMLDialogElement, ModalProps>(\n  (\n    { children, open, responsive, backdrop, dataTheme, className, ...props },\n    ref\n  ): JSX.Element => {\n    const containerClasses = twMerge(\n      'modal',\n      clsx({\n        'modal-open': open,\n        'modal-bottom sm:modal-middle': responsive,\n      })\n    )\n\n    const bodyClasses = twMerge('modal-box', className)\n\n    return (\n      <dialog\n        {...props}\n        aria-label=\"Modal\"\n        aria-hidden={!open}\n        open={open}\n        aria-modal={open}\n        data-theme={dataTheme}\n        className={containerClasses}\n        ref={ref}\n      >\n        <form method=\"dialog\" data-theme={dataTheme} className={bodyClasses}>\n          {children}\n        </form>\n        {backdrop && (\n          <form method=\"dialog\" className=\"modal-backdrop\">\n            <button>close</button>\n          </form>\n        )}\n      </dialog>\n    )\n  }\n)\n\nModal.displayName = 'Modal'\n\nexport type DialogProps = Omit<ModalProps, 'ref'>\nconst useDialog = () => {\n  const dialogRef = useRef<HTMLDialogElement>(null)\n\n  const handleShow = useCallback(() => {\n    dialogRef.current?.showModal()\n  }, [dialogRef])\n\n  const handleHide = useCallback(() => {\n    dialogRef.current?.close()\n  }, [dialogRef])\n\n  const Dialog = ({ children, ...props }: DialogProps) => {\n    return (\n      <Modal {...props} ref={dialogRef}>\n        {children}\n      </Modal>\n    )\n  }\n  Dialog.displayName = 'Dialog'\n  return { dialogRef, Dialog, handleShow, handleHide }\n}\nexport default Object.assign(Modal, {\n  Header: ModalHeader,\n  Body: ModalBody,\n  Actions: ModalActions,\n  Legacy: ModalLegacy,\n  useDialog,\n})\n"],"names":["ModalActions","React","children","className","props","ref","classes","twMerge","jsx","ModalActions$1","ModalBody","ModalBody$1","ModalHeader","ModalHeader$1","Modal","forwardRef","open","responsive","onClickBackdrop","dataTheme","containerClasses","clsx","bodyClasses","e","ModalLegacy","backdrop","jsxs","useDialog","dialogRef","useRef","handleShow","useCallback","_a","handleHide","Dialog","Modal$1"],"mappings":"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"}