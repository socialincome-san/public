{"version":3,"file":"WindowMockup.stories-aa2004a2.js","sources":["../../src/WindowMockup/WindowMockup.tsx"],"sourcesContent":["import React, { forwardRef } from 'react'\nimport clsx from 'clsx'\nimport { twMerge } from 'tailwind-merge'\n\nimport { IComponentBaseProps } from '../types'\nimport { bgColors, brandColors, componentStatuses } from '../constants'\n\nexport const windowMockupColors = [\n  ...bgColors,\n  ...brandColors,\n  ...componentStatuses,\n] as const\n\ntype WindowMockupColors = typeof windowMockupColors[number]\n\nexport type WindowMockupProps = React.HTMLAttributes<HTMLDivElement> &\n  IComponentBaseProps & {\n    frameColor?: WindowMockupColors\n    backgroundColor?: WindowMockupColors\n    border?: boolean\n    borderColor?: WindowMockupColors\n  }\n\nconst WindowMockup = forwardRef<HTMLDivElement, WindowMockupProps>(\n  (\n    {\n      border,\n      borderColor,\n      backgroundColor,\n      frameColor,\n      dataTheme,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ): JSX.Element => {\n    // Set border color to framecolor or 'bg-base-300', if border color is not defined\n    const borderColorValue = borderColor\n      ? borderColor\n      : frameColor || 'base-300'\n\n    const classes = twMerge(\n      'mockup-window',\n      border && `border border-${borderColorValue}`,\n      clsx({\n        'border-primary': borderColorValue === 'primary',\n        'border-secondary': borderColorValue === 'secondary',\n        'border-accent': borderColorValue === 'accent',\n        'border-info': borderColorValue === 'info',\n        'border-success': borderColorValue === 'success',\n        'border-warning': borderColorValue === 'warning',\n        'border-error': borderColorValue === 'error',\n        'border-base-100': borderColorValue === 'base-100',\n        'border-base-200': borderColorValue === 'base-200',\n        'border-base-300': borderColorValue === 'base-300',\n        'border-neutral': borderColorValue === 'neutral',\n        'bg-primary': frameColor === 'primary',\n        'bg-secondary': frameColor === 'secondary',\n        'bg-accent': frameColor === 'accent',\n        'bg-info': frameColor === 'info',\n        'bg-success': frameColor === 'success',\n        'bg-warning': frameColor === 'warning',\n        'bg-error': frameColor === 'error',\n        'bg-base-100': frameColor === 'base-100',\n        'bg-base-200': frameColor === 'base-200',\n        'bg-base-300': frameColor === 'base-300',\n        'bg-neutral': frameColor === 'neutral',\n      }),\n      className\n    )\n\n    // If border is true, then we need to add the border-t and padding classes to the children\n    // if more than one child is passed in, or the single child is not a valid element, then we need to wrap the child/children in a div\n\n    const numChildren = React.Children.count(children)\n    const firstChild = numChildren > 0 && React.Children.toArray(children)[0]\n\n    // List of classes that child element will have\n    const innerClasses = clsx(\n      backgroundColor && `bg-${backgroundColor}`,\n      border && `border-t border-${borderColorValue}`,\n      'p-4'\n    )\n\n    // Add the innerClasses to the child element, merging classNames if existing, or wrapping with div and adding innerClasses\n    const innerEl =\n      firstChild && React.isValidElement(firstChild) ? (\n        React.cloneElement(firstChild as React.ReactElement, {\n          className: twMerge(innerClasses, firstChild.props.className),\n        })\n      ) : (\n        <div className={innerClasses}>{children}</div>\n      )\n\n    return (\n      <div\n        aria-label=\"Window mockup\"\n        {...props}\n        data-theme={dataTheme}\n        className={classes}\n        ref={ref}\n      >\n        {innerEl}\n      </div>\n    )\n  }\n)\n\nWindowMockup.displayName = 'WindowMockup'\n\nexport default WindowMockup\n"],"names":["WindowMockup","forwardRef","border","borderColor","backgroundColor","frameColor","dataTheme","className","children","props","ref","borderColorValue","classes","twMerge","clsx","firstChild","React","innerClasses","innerEl","jsx","WindowMockup$1"],"mappings":"sLAuBA,MAAAA,EAAAC,EAAA,WAAqB,CAAA,CAEjB,OAAAC,EACE,YAAAC,EACA,gBAAAC,EACA,WAAAC,EACA,UAAAC,EACA,UAAAC,EACA,SAAAC,EACA,GAAAC,CACG,EAAAC,IAAA,CAKL,MAAAC,EAAAR,GAAAE,GAAA,WAIAO,EAAAC,EAAgB,gBACdX,GAAA,iBAAAS,IAC2BG,EAAA,CACtB,iBAAAH,IAAA,UACoC,mBAAAA,IAAA,YACE,gBAAAA,IAAA,SACH,cAAAA,IAAA,OACF,iBAAAA,IAAA,UACG,iBAAAA,IAAA,UACA,eAAAA,IAAA,QACF,kBAAAA,IAAA,WACG,kBAAAA,IAAA,WACA,kBAAAA,IAAA,WACA,iBAAAA,IAAA,UACD,aAAAN,IAAA,UACV,eAAAA,IAAA,YACE,YAAAA,IAAA,SACH,UAAAA,IAAA,OACF,aAAAA,IAAA,UACG,aAAAA,IAAA,UACA,WAAAA,IAAA,QACF,cAAAA,IAAA,WACG,cAAAA,IAAA,WACA,cAAAA,IAAA,WACA,aAAAA,IAAA,SACD,CAAA,EAC9BE,CACD,EAOFQ,EADAC,EAAA,SAAA,MAAAR,CAAA,EACA,GAAAQ,EAAA,SAAA,QAAAR,CAAA,EAAA,CAAA,EAGAS,EAAAH,EAAqBV,GAAA,MAAAA,IACMF,GAAA,mBAAAS,IACI,KAC7B,EAIFO,EAAAH,GAAAC,EAAA,eAAAD,CAAA,EAAAC,EAAA,aAAAD,EAAA,CAEyD,UAAAF,EAAAI,EAAAF,EAAA,MAAA,SAAA,CACQ,CAAA,EAAAI,EAAA,MAAA,CAAA,UAAAF,EAAA,SAAAT,CAAA,CAAA,EAMjE,OAAAW,EACE,MAAC,CAAA,aAAA,gBACY,GAAAV,EACP,aAAAH,EACQ,UAAAM,EACD,IAAAF,EACX,SAAAQ,CAEC,CAAA,CACH,CAGN,EAEAlB,EAAA,YAAA,eAEA,MAAAoB,EAAApB;;;;;;;;;;;;;;;;;;;;;;;;"}