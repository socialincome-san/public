{"version":3,"file":"Collapse.stories-5b2b6863.js","sources":["../../src/Collapse/CollapseTitle.tsx","../../src/Collapse/CollapseContent.tsx","../../src/Collapse/Collapse.tsx"],"sourcesContent":["import React from 'react'\nimport { twMerge } from 'tailwind-merge'\n\nimport { IComponentBaseProps } from '../types'\n\nexport type CollapseTitleProps = React.HTMLAttributes<HTMLDivElement> &\n  IComponentBaseProps\n\nconst CollapseTitle = ({\n  children,\n  className,\n  ...props\n}: CollapseTitleProps): JSX.Element => {\n  const classes = twMerge('collapse-title', className)\n\n  return (\n    <div {...props} className={classes}>\n      {children}\n    </div>\n  )\n}\n\nexport default CollapseTitle\n","import React from 'react'\nimport { twMerge } from 'tailwind-merge'\n\nimport { IComponentBaseProps } from '../types'\n\nexport type CollapseContentProps = React.HTMLAttributes<HTMLDivElement> &\n  IComponentBaseProps\n\nconst CollapseContent = ({\n  children,\n  className,\n  ...props\n}: CollapseContentProps): JSX.Element => {\n  const classes = twMerge('collapse-content', className)\n\n  return (\n    <div {...props} className={classes}>\n      {children}\n    </div>\n  )\n}\n\nexport default CollapseContent\n","import React, { useRef, useState } from 'react'\nimport clsx from 'clsx'\nimport { twMerge } from 'tailwind-merge'\n\nimport { IComponentBaseProps } from '../types'\n\nimport CollapseTitle from './CollapseTitle'\nimport CollapseContent from './CollapseContent'\n\nexport type CollapseProps = React.HTMLAttributes<HTMLDivElement> &\n  IComponentBaseProps & {\n    checkbox?: boolean\n    icon?: 'arrow' | 'plus'\n    open?: boolean\n    onOpen?: () => void\n    onClose?: () => void\n    onToggle?: () => void\n  }\n\nconst Collapse = React.forwardRef<HTMLDivElement, CollapseProps>(\n  (\n    {\n      children,\n      checkbox,\n      icon,\n      open,\n      dataTheme,\n      className,\n      onOpen,\n      onClose,\n      onToggle,\n      ...props\n    },\n    ref\n  ): JSX.Element => {\n    const classes = twMerge(\n      'collapse',\n      className,\n      clsx({\n        'collapse-arrow': icon === 'arrow',\n        'collapse-plus': icon === 'plus',\n        'collapse-open': open === true,\n        'collapse-close': open === false,\n      })\n    )\n\n    const [isChecked, setIsChecked] = useState(open)\n    const checkboxRef = useRef<HTMLInputElement>(null)\n\n    // Handle events for checkbox changes\n    const handleCheckboxChange = () => {\n      if (onToggle) {\n        onToggle()\n      }\n      if (onOpen && checkboxRef.current?.checked) {\n        onOpen()\n      } else if (onClose && !checkboxRef.current?.checked) {\n        onClose()\n      }\n      \n      setIsChecked(checkboxRef.current?.checked)\n    }\n\n    // Handle blur events, specifically handling open/close for non checkbox types\n    const handleBlur = (event: React.FocusEvent<HTMLDivElement, Element>) => {\n      if (!checkbox && onToggle) onToggle()\n      if (!checkbox && onClose) onClose()\n      if (props.onBlur) props.onBlur(event)\n    }\n\n    // Handle focus events, specifically handling open/close for non checkbox types\n    const handleFocus = (event: React.FocusEvent<HTMLDivElement, Element>) => {\n      if (!checkbox && onToggle) onToggle()\n      if (!checkbox && onOpen) onOpen()\n      if (props.onFocus) props.onFocus(event)\n    }\n\n    return (\n      <div\n        aria-expanded={open}\n        {...props}\n        ref={ref}\n        tabIndex={isChecked === true ? undefined : 0}\n        data-theme={dataTheme}\n        className={classes}\n        onBlur={handleBlur}\n        onFocus={handleFocus}\n      >\n        {checkbox && (\n          <input\n            type=\"checkbox\"\n            tabIndex={isChecked === true ? 0 : undefined}\n            className=\"peer\"\n            ref={checkboxRef}\n            onChange={handleCheckboxChange}\n          />\n        )}\n        {children}\n      </div>\n    )\n  }\n)\n\nexport default Object.assign(Collapse, {\n  Title: CollapseTitle,\n  Content: CollapseContent,\n})\n"],"names":["CollapseTitle","children","className","props","classes","twMerge","jsx","CollapseTitle$1","CollapseContent","CollapseContent$1","Collapse","React","checkbox","icon","open","dataTheme","onOpen","onClose","onToggle","ref","clsx","isChecked","setIsChecked","useState","checkboxRef","useRef","jsxs","event","_a","_b","_c","Collapse$1"],"mappings":"0LAQA,MAAAA,EAAA,CAAA,CAAuB,SAAAC,EACrB,UAAAC,EACA,GAAAC,CAEF,IAAA,CACE,MAAAC,EAAAC,EAAA,iBAAAH,CAAA,EAEA,OAAAI,EAAA,MAAA,CAAA,GAAAH,EAAA,UAAAC,EAAA,SAAAH,CAAA,CAAA,CAKF,EAEAM,GAAAP,8MCdA,MAAAQ,EAAA,CAAA,CAAyB,SAAAP,EACvB,UAAAC,EACA,GAAAC,CAEF,IAAA,CACE,MAAAC,EAAAC,EAAA,mBAAAH,CAAA,EAEA,OAAAI,EAAA,MAAA,CAAA,GAAAH,EAAA,UAAAC,EAAA,SAAAH,CAAA,CAAA,CAKF,EAEAQ,GAAAD,kNCHA,MAAAE,EAAAC,GAAA,WAAuB,CAAA,CAEnB,SAAAV,EACE,SAAAW,EACA,KAAAC,EACA,KAAAC,EACA,UAAAC,EACA,UAAAb,EACA,OAAAc,EACA,QAAAC,EACA,SAAAC,EACA,GAAAf,CACG,EAAAgB,KAAA,CAIL,MAAAf,GAAAC,EAAgB,WACdH,EACAkB,GAAA,CACK,iBAAAP,IAAA,QACwB,gBAAAA,IAAA,OACD,gBAAAC,IAAA,GACA,iBAAAA,IAAA,EACC,CAAA,CAC5B,EAGH,CAAAO,EAAAC,EAAA,EAAAC,EAAA,SAAAT,CAAA,EACAU,EAAAC,SAAA,IAAA,EA8BA,OAAAC,EACE,MAAC,CAAA,gBAAAZ,EACgB,GAAAX,EACX,IAAAgB,GACJ,SAAAE,IAAA,GAAA,OAAA,EAC2C,aAAAN,EAC/B,UAAAX,GACD,OApBfuB,GAAA,CACE,CAAAf,GAAAM,GAA2BA,IAC3B,CAAAN,GAAAK,GAA0BA,IAC1Bd,EAAA,QAAkBA,EAAA,OAAAwB,CAAA,CAAkB,EAkB1B,QAdZA,GAAA,CACE,CAAAf,GAAAM,GAA2BA,IAC3B,CAAAN,GAAAI,GAAyBA,IACzBb,EAAA,SAAmBA,EAAA,QAAAwB,CAAA,CAAmB,EAY3B,SAAA,CAERf,GAAAN,EACC,QAAC,CAAA,KAAA,WACM,SAAAe,IAAA,GAAA,EAAA,OAC8B,UAAA,OACzB,IAAAG,EACL,SA3Cb,IAAA,WACEN,GACEA,IAEFF,KAAAY,EAAAJ,EAAA,UAAA,MAAAI,EAAA,SACEZ,IAAOC,GAAA,GAAAY,EAAAL,EAAA,UAAA,MAAAK,EAAA,UAEPZ,IAGFK,IAAAQ,EAAAN,EAAA,UAAA,YAAAM,EAAA,OAAA,CAAyC,CAkCzB,CAAA,EACZ7B,CAED,CAAA,CAAA,CACH,CAGN,EAEA8B,EAAA,OAAA,OAAArB,EAAA,CAAuC,MAAAV,GAC9B,QAAAQ,EAET,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}