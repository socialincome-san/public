{"version":3,"file":"Button-3d301c6a.js","sources":["../../src/Button/Button.tsx"],"sourcesContent":["import React, { forwardRef, ReactNode, ElementType } from 'react'\nimport clsx from 'clsx'\nimport { twMerge } from 'tailwind-merge'\n\nimport Loading from '../Loading'\nimport {\n  IComponentBaseProps,\n  ComponentColor,\n  ComponentShape,\n  ComponentSize,\n} from '../types'\n\ntype ITagProps = {\n  a: {\n    attr: React.AnchorHTMLAttributes<HTMLAnchorElement>\n    ele: HTMLAnchorElement\n  }\n  button: {\n    attr: React.ButtonHTMLAttributes<HTMLButtonElement>\n    ele: HTMLButtonElement\n  }\n  div: {\n    attr: React.HTMLAttributes<HTMLDivElement>\n    ele: HTMLDivElement\n  }\n  img: {\n    attr: React.ImgHTMLAttributes<HTMLImageElement>\n    ele: HTMLImageElement\n  }\n  input: {\n    attr: React.InputHTMLAttributes<HTMLInputElement>\n    ele: HTMLInputElement\n  }\n  label: {\n    attr: React.LabelHTMLAttributes<HTMLLabelElement>\n    ele: HTMLLabelElement\n  }\n  span: {\n    attr: React.HTMLAttributes<HTMLSpanElement>\n    ele: HTMLSpanElement\n  }\n}\n\ntype GetTagProps<T extends ElementType> = T extends keyof ITagProps\n  ? ITagProps[T]\n  : ITagProps['button']\n\nexport type ButtonProps<\n  T extends ElementType = 'button',\n  A extends React.HTMLAttributes<HTMLElement> = GetTagProps<T>['attr']\n> = Omit<A, 'color' | 'size'> &\n  IComponentBaseProps & {\n    shape?: ComponentShape\n    size?: ComponentSize\n    variant?: 'outline' | 'link'\n    color?: ComponentColor\n    glass?: boolean\n    wide?: boolean\n    fullWidth?: boolean\n    responsive?: boolean\n    animation?: boolean\n    loading?: boolean\n    active?: boolean\n    startIcon?: ReactNode\n    endIcon?: ReactNode\n    disabled?: boolean\n    tag?: T\n  }\n//  https://developer.mozilla.org/en-US/docs/Glossary/Void_element\nconst VoidElementList: ElementType[] = [\n  'area',\n  'base',\n  'br',\n  'col',\n  'embed',\n  'hr',\n  'img',\n  'input',\n  'link',\n  'keygen',\n  'meta',\n  'param',\n  'source',\n  'track',\n  'wbr',\n]\nconst Button = forwardRef<HTMLButtonElement, ButtonProps>(\n  (\n    {\n      children,\n      shape,\n      size,\n      variant,\n      color,\n      glass,\n      startIcon,\n      endIcon,\n      wide,\n      fullWidth,\n      responsive,\n      animation = true,\n      loading,\n      active,\n      disabled,\n      dataTheme,\n      className,\n      style,\n      tag = 'button',\n      ...props\n    },\n    ref\n  ): JSX.Element => {\n    const Tag = tag\n    const classes = twMerge(\n      'btn',\n      className,\n      clsx(((startIcon && !loading) || endIcon) && 'gap-2', {\n        'btn-lg': size === 'lg',\n        'btn-md': size === 'md',\n        'btn-sm': size === 'sm',\n        'btn-xs': size === 'xs',\n        'btn-circle': shape === 'circle',\n        'btn-square': shape === 'square',\n        'btn-outline': variant === 'outline',\n        'btn-link': variant === 'link',\n        'btn-neutral': color === 'neutral',\n        'btn-primary': color === 'primary',\n        'btn-secondary': color === 'secondary',\n        'btn-accent': color === 'accent',\n        'btn-info': color === 'info',\n        'btn-success': color === 'success',\n        'btn-warning': color === 'warning',\n        'btn-error': color === 'error',\n        'btn-ghost': color === 'ghost',\n        glass: glass,\n        'btn-wide': wide,\n        'btn-block': fullWidth,\n        'btn-xs sm:btn-sm md:btn-md lg:btn-lg': responsive,\n        'no-animation': !animation,\n        'btn-active': active,\n        'btn-disabled': disabled,\n      })\n    )\n    if (VoidElementList.includes(Tag)) {\n      return (\n        <Tag\n          {...props}\n          ref={ref}\n          data-theme={dataTheme}\n          className={classes}\n          style={style}\n          disabled={disabled}\n        />\n      )\n    } else {\n      return (\n        <Tag\n          {...props}\n          ref={ref}\n          data-theme={dataTheme}\n          className={classes}\n          style={style}\n          disabled={disabled}\n        >\n          {!startIcon && loading && <Loading size={size} />}\n          {startIcon && !loading && startIcon}\n          {children}\n          {endIcon && endIcon}\n        </Tag>\n      )\n    }\n  }\n)\n\nButton.displayName = 'Button'\n\nexport default Button as <\n  T extends ElementType = 'button',\n  E extends HTMLElement = GetTagProps<T>['ele'],\n  A extends React.HTMLAttributes<HTMLElement> = GetTagProps<T>['attr']\n>(\n  props: ButtonProps<T, A> & { ref?: React.Ref<E> }\n) => JSX.Element\n"],"names":["VoidElementList","Button","forwardRef","children","shape","size","variant","color","glass","startIcon","endIcon","wide","fullWidth","responsive","animation","loading","active","disabled","dataTheme","className","style","tag","props","ref","Tag","classes","twMerge","clsx","jsx","jsxs","Loading","Button$1"],"mappings":"kLAqEA,MAAAA,EAAA,CAAuC,OACrC,OACA,KACA,MACA,QACA,KACA,MACA,QACA,OACA,SACA,OACA,QACA,SACA,QACA,KAEF,EACAC,EAAAC,EAAA,WAAe,CAAA,CAEX,SAAAC,EACE,MAAAC,EACA,KAAAC,EACA,QAAAC,EACA,MAAAC,EACA,MAAAC,EACA,UAAAC,EACA,QAAAC,EACA,KAAAC,EACA,UAAAC,EACA,WAAAC,EACA,UAAAC,EAAA,GACY,QAAAC,EACZ,OAAAC,EACA,SAAAC,EACA,UAAAC,EACA,UAAAC,EACA,MAAAC,EACA,IAAAC,EAAA,SACM,GAAAC,CACH,EAAAC,IAAA,CAIL,MAAAC,EAAAH,EACAI,EAAAC,EAAgB,MACdP,EACAQ,GAAAlB,GAAA,CAAAM,GAAAL,IAAA,QAAA,CACsD,SAAAL,IAAA,KACjC,SAAAA,IAAA,KACA,SAAAA,IAAA,KACA,SAAAA,IAAA,KACA,aAAAD,IAAA,SACK,aAAAA,IAAA,SACA,cAAAE,IAAA,UACG,WAAAA,IAAA,OACH,cAAAC,IAAA,UACC,cAAAA,IAAA,UACA,gBAAAA,IAAA,YACE,aAAAA,IAAA,SACH,WAAAA,IAAA,OACF,cAAAA,IAAA,UACG,cAAAA,IAAA,UACA,YAAAA,IAAA,QACF,YAAAA,IAAA,QACA,MAAAC,EACvB,WAAAG,EACY,YAAAC,EACC,uCAAAC,EAC2B,eAAA,CAAAC,EACvB,aAAAE,EACH,eAAAC,CACE,CAAA,CACjB,EAEH,OAAAjB,EAAA,SAAAwB,CAAA,EACEI,EACEJ,EAAC,CAAA,GAAAF,EACK,IAAAC,EACJ,aAAAL,EACY,UAAAO,EACD,MAAAL,EACX,SAAAH,CACA,CAAA,EAIJY,EACEL,EAAC,CAAA,GAAAF,EACK,IAAAC,EACJ,aAAAL,EACY,UAAAO,EACD,MAAAL,EACX,SAAAH,EACA,SAAA,CAEC,CAAAR,GAAAM,GAAAa,EAAAE,EAAA,CAAA,KAAAzB,CAAA,CAAA,EAA8CI,GAAA,CAAAM,GAAAN,EACrBN,EACzBO,GAAAA,CACW,CAAA,CAAA,CAGlB,CAEJ,EAEAT,EAAA,YAAA,SAEA,MAAA8B,EAAA9B"}