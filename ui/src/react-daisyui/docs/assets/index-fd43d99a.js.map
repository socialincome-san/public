{"version":3,"file":"index-fd43d99a.js","sources":["../../src/Theme/ThemeContext.ts","../../src/Theme/utils.ts","../../src/Theme/Theme.tsx"],"sourcesContent":["import React from 'react'\n\nimport { DataTheme } from '../types'\n\nexport interface IThemeContext {\n  theme: DataTheme\n  setTheme: (theme: DataTheme) => void\n}\n\nexport const ThemeContext = React.createContext<IThemeContext>({\n  theme: 'light',\n  setTheme: () => {},\n})\n","import React from 'react'\n\nexport const getThemeFromClosestAncestor = (\n  ref: React.RefObject<HTMLElement>\n) => {\n  if (!ref.current) return\n  const matches = ref.current.closest('[data-theme]')\n  if (matches) return matches.getAttribute('data-theme')\n}\n","import React, { MutableRefObject, useEffect, useRef, useState } from 'react'\nimport { defaultTheme } from '../constants'\n\nimport { DataTheme, IComponentBaseProps } from '../types'\nimport { ThemeContext } from './ThemeContext'\nimport { getThemeFromClosestAncestor } from './utils'\n\nexport type ThemeProps = Omit<\n  React.HTMLAttributes<HTMLDivElement>,\n  'onChange'\n> &\n  IComponentBaseProps & {\n    onChange?: (theme: DataTheme) => void\n  }\n\nconst Theme = React.forwardRef<HTMLDivElement, ThemeProps>(\n  (\n    { children, dataTheme, onChange, className, ...props },\n    ref\n  ): JSX.Element => {\n    // Either use provided ref or create a new ref\n    const themeRef = useRef<HTMLDivElement>(\n      (ref as MutableRefObject<HTMLDivElement>)?.current\n    )\n\n    const closestAncestorTheme = getThemeFromClosestAncestor(themeRef)\n\n    // If no theme is provided, use the closest ancestor theme, if no ancestor theme, fallback to default theme (defined in constants)\n    const [theme, setTheme] = useState<DataTheme>(\n      dataTheme || closestAncestorTheme || defaultTheme\n    )\n\n    const handleThemeChange = (theme: DataTheme) => {\n      // Fire custom onChange, if provided. ie, user provided function to store theme in session/local storage\n      onChange && onChange(theme)\n      // Update state/context\n      setTheme(theme)\n    }\n\n    // Properly handle changes to theme prop on Theme component\n    useEffect(() => {\n      if (dataTheme !== theme) {\n        dataTheme && handleThemeChange(dataTheme)\n      }\n    }, [dataTheme])\n\n    return (\n      <ThemeContext.Provider value={{ theme, setTheme: handleThemeChange }}>\n        <div {...props} data-theme={theme} className={className} ref={themeRef}>\n          {children}\n        </div>\n      </ThemeContext.Provider>\n    )\n  }\n)\nexport default Theme\n"],"names":["ThemeContext","React","getThemeFromClosestAncestor","ref","matches","Theme","children","dataTheme","onChange","className","props","themeRef","useRef","closestAncestorTheme","theme","setTheme","useState","defaultTheme","handleThemeChange","theme2","useEffect","jsx","Theme$1"],"mappings":"sIASa,MAAAA,EAAeC,EAAM,cAA6B,CAC7D,MAAO,QACP,SAAU,IAAM,CAAC,CACnB,CAAC,ECVYC,EACXC,GACG,CACH,GAAI,CAACA,EAAI,QAAS,OAClB,MAAMC,EAAUD,EAAI,QAAQ,QAAQ,cAAc,EAC9C,GAAAC,EAAgB,OAAAA,EAAQ,aAAa,YAAY,CACvD,ECOAC,EAAAJ,EAAA,WAAoB,CAAA,CAAA,SAAAK,EAAA,UAAAC,EAAA,SAAAC,EAAA,UAAAC,EAAA,GAAAC,CAAA,EAAAP,IAAA,CAMhB,MAAAQ,EAAAC,EAAA,OAAiBT,GAAA,YAAAA,EAAA,OAC4B,EAG7CU,EAAAX,EAAAS,CAAA,EAGA,CAAAG,EAAAC,CAAA,EAAAC,EAAA,SAA0BT,GAAAM,GAAAI,CACa,EAGvCC,EAAAC,GAAA,CAEEX,GAAAA,EAAAW,CAAA,EAEAJ,EAAAI,CAAA,CAAc,EAIhBC,OAAAA,EAAAA,UAAA,IAAA,CACEb,IAAAO,GACEP,GAAAW,EAAAX,CAAA,CACF,EAAA,CAAAA,CAAA,CAAA,EAGFc,EAAArB,EAAA,SAAA,CAAA,MAAA,CAAA,MAAAc,EAAA,SAAAI,CAAA,EAAA,SAAAG,EAAA,MAAA,CAAA,GAAAX,EAAA,aAAAI,EAAA,UAAAL,EAAA,IAAAE,EAAA,SAAAL,EAAA,CAAA,CAAA,CAKE,CAGN,EACAgB,EAAAjB"}