{"version":3,"file":"index-c4b7e3e0.js","sources":["../../src/Dropdown/DropdownToggle.tsx","../../src/Dropdown/DropdownDetails.tsx","../../src/Dropdown/DropdownMenu.tsx","../../src/Dropdown/DropdownItem.tsx","../../src/Dropdown/Dropdown.tsx"],"sourcesContent":["import React, { forwardRef } from 'react'\n\nimport { ComponentColor, ComponentSize, IComponentBaseProps } from '../types'\n\nimport Button, { ButtonProps } from '../Button'\n\nexport type DropdownToggleProps = Omit<\n  React.LabelHTMLAttributes<HTMLLabelElement>,\n  'color'\n> &\n  IComponentBaseProps & {\n    color?: ComponentColor\n    size?: ComponentSize\n    button?: boolean\n    disabled?: boolean\n  }\n\nconst DropdownToggle = ({\n  children,\n  color,\n  size,\n  button = true,\n  dataTheme,\n  className,\n  disabled,\n  ...props\n}: DropdownToggleProps) => {\n  return (\n    <label tabIndex={0} className={className} {...props}>\n      {button ? (\n        <Button\n          type=\"button\"\n          dataTheme={dataTheme}\n          color={color}\n          size={size}\n          disabled={disabled}\n        >\n          {children}\n        </Button>\n      ) : (\n        children\n      )}\n    </label>\n  )\n}\n\nexport type SummaryProps = Omit<ButtonProps, 'tag'>\nexport const Summary = forwardRef<HTMLElement, SummaryProps>(\n  (props, ref): JSX.Element => {\n    return <Button {...props} ref={ref} tag=\"summary\" />\n  }\n)\n\nexport default DropdownToggle\n","import React from 'react'\n\nimport { classesFn, DropdownProps } from './Dropdown'\nimport DropdownMenu from './DropdownMenu'\nimport DropdownItem from './DropdownItem'\nimport { Summary } from './DropdownToggle'\n\nexport type DetailsProps = Omit<\n  DropdownProps<HTMLDetailsElement>,\n  'item' | 'hover'\n>\nconst Details = React.forwardRef<HTMLDetailsElement, DetailsProps>(\n  (\n    {\n      children,\n      className,\n      horizontal,\n      vertical,\n      end,\n      dataTheme,\n      open,\n      ...props\n    },\n    ref\n  ): JSX.Element => {\n    return (\n      <details\n        role=\"listbox\"\n        {...props}\n        ref={ref}\n        data-theme={dataTheme}\n        className={classesFn({\n          className,\n          horizontal,\n          vertical,\n          open,\n          end,\n        })}\n        open={open}\n      >\n        {children}\n      </details>\n    )\n  }\n)\n\nDetails.displayName = 'Details'\nexport default Object.assign(Details, {\n  Toggle: Summary,\n})\n","import React from 'react'\nimport { twMerge } from 'tailwind-merge'\nimport { IComponentBaseProps } from '../types'\n\nexport type DropdownMenuProps = React.HTMLAttributes<HTMLUListElement> &\n  IComponentBaseProps\n\nconst DropdownMenu = ({\n  dataTheme,\n  className,\n  ...props\n}: DropdownMenuProps) => {\n  const classes = twMerge(\n    'dropdown-content menu p-2 shadow bg-base-100 rounded-box',\n    className\n  )\n\n  return (\n    <ul\n      {...props}\n      tabIndex={0}\n      data-theme={dataTheme}\n      className={classes}\n      role=\"menu\"\n    />\n  )\n}\n\nexport default DropdownMenu\n","import React from 'react'\n\nexport type DropdownItemProps = React.AnchorHTMLAttributes<HTMLAnchorElement>\n\nconst DropdownItem = React.forwardRef<HTMLAnchorElement, DropdownItemProps>(\n  ({ className, ...props }, ref) => {\n    return (\n      <li className={className} role=\"menuitem\">\n        <a ref={ref} {...props}></a>\n      </li>\n    )\n  }\n)\n\nexport default DropdownItem\n","import React, { ReactNode } from 'react'\nimport clsx from 'clsx'\nimport { twMerge } from 'tailwind-merge'\n\nimport { IComponentBaseProps } from '../types'\n\nimport DropdownDetails from './DropdownDetails'\nimport DropdownMenu from './DropdownMenu'\nimport DropdownItem from './DropdownItem'\nimport DropdownToggle from './DropdownToggle'\n\nexport type DropdownProps<T extends HTMLElement = HTMLDivElement> =\n  React.HTMLAttributes<T> &\n    IComponentBaseProps & {\n      item?: ReactNode\n      horizontal?: 'left' | 'right'\n      vertical?: 'top' | 'bottom'\n      end?: boolean\n      hover?: boolean\n      open?: boolean\n    }\n\nexport const classesFn = ({\n  className,\n  horizontal,\n  vertical,\n  end,\n  hover,\n  open,\n}: Pick<\n  DropdownProps,\n  'className' | 'horizontal' | 'vertical' | 'end' | 'hover' | 'open'\n>) =>\n  twMerge(\n    'dropdown',\n    className,\n    clsx({\n      'dropdown-left': horizontal === 'left',\n      'dropdown-right': horizontal === 'right',\n      'dropdown-top': vertical === 'top',\n      'dropdown-bottom': vertical === 'bottom',\n      'dropdown-end': end,\n      'dropdown-hover': hover,\n      'dropdown-open': open,\n    })\n  )\n\nconst Dropdown = React.forwardRef<HTMLDivElement, DropdownProps>(\n  (\n    {\n      children,\n      className,\n      item,\n      horizontal,\n      vertical,\n      end,\n      hover,\n      open,\n      dataTheme,\n      ...props\n    },\n    ref\n  ): JSX.Element => {\n    return (\n      <div\n        role=\"listbox\"\n        {...props}\n        ref={ref}\n        data-theme={dataTheme}\n        className={classesFn({\n          className,\n          horizontal,\n          vertical,\n          end,\n          hover,\n          open,\n        })}\n      >\n        {item ? (\n          <>\n            <label tabIndex={0}>{children}</label>\n            <ul className=\"dropdown-content\">{item}</ul>\n          </>\n        ) : (\n          <>{children}</>\n        )}\n      </div>\n    )\n  }\n)\n\nexport default Object.assign(Dropdown, {\n  Details: DropdownDetails,\n  Toggle: DropdownToggle,\n  Menu: DropdownMenu,\n  Item: DropdownItem,\n})\n"],"names":["DropdownToggle","children","color","size","button","dataTheme","className","disabled","props","jsx","Button","Summary","forwardRef","ref","DropdownToggle$1","Details","React","horizontal","vertical","end","open","classesFn","DropdownDetails","DropdownMenu","classes","twMerge","DropdownMenu$1","DropdownItem","DropdownItem$1","hover","clsx","Dropdown","item","jsxs","Fragment","Dropdown$1"],"mappings":"iMAiBA,MAAAA,EAAA,CAAA,CAAwB,SAAAC,EACtB,MAAAC,EACA,KAAAC,EACA,OAAAC,EAAA,GACS,UAAAC,EACT,UAAAC,EACA,SAAAC,EACA,GAAAC,CAEF,IACEC,EAAA,QAAA,CAAA,SAAA,EAAA,UAAAH,EAAA,GAAAE,EAAA,SAAAJ,EAAAK,EAGMC,EAAC,CAAA,KAAA,SACM,UAAAL,EACL,MAAAH,EACA,KAAAC,EACA,SAAAI,EACA,SAAAN,CAEC,CAAA,EAAAA,CAAA,CAAA,EAUJU,EAAAC,EAAA,WAAgB,CAAAJ,EAAAK,IAEnBJ,EAAAC,EAAA,CAAA,GAAAF,EAAA,IAAAK,EAAA,IAAA,SAAA,CAAA,CAEJ,EAEAC,EAAAd,q+EC1CA,MAAAe,EAAAC,EAAA,WAAsB,CAAA,CAElB,SAAAf,EACE,UAAAK,EACA,WAAAW,EACA,SAAAC,EACA,IAAAC,EACA,UAAAd,EACA,KAAAe,EACA,GAAAZ,CACG,EAAAK,IAILJ,EACE,UAAC,CAAA,KAAA,UACM,GAAAD,EACD,IAAAK,EACJ,aAAAR,EACY,UAAAgB,EAAA,CACS,UAAAf,EACnB,WAAAW,EACA,SAAAC,EACA,KAAAE,EACA,IAAAD,CACA,CAAA,EACD,KAAAC,EACD,SAAAnB,CAEC,CAAA,CAIT,EAEAc,EAAA,YAAA,UACA,MAAAO,EAAA,OAAA,OAAAP,EAAA,CAAsC,OAAAJ,CAEtC,CAAA,4nBC1CA,MAAAY,EAAA,CAAA,CAAsB,UAAAlB,EACpB,UAAAC,EACA,GAAAE,CAEF,IAAA,CACE,MAAAgB,EAAAC,EAAgB,2DACdnB,CACA,EAGF,OAAAG,EACE,KAAC,CAAA,GAAAD,EACK,SAAA,EACM,aAAAH,EACE,UAAAmB,EACD,KAAA,MACN,CAAA,CAGX,EAEAE,EAAAH,4MCxBA,MAAAI,EAAAX,EAAA,WAA2B,CAAA,CAAA,UAAAV,EAAA,GAAAE,CAAA,EAAAK,IAEvBJ,EAAA,KAAA,CAAA,UAAAH,EAAA,KAAA,WAAA,SAAAG,EAAA,IAAA,CAAA,IAAAI,EAAA,GAAAL,CAAA,CAAA,CAAA,CAAA,CAMJ,EAEAoB,EAAAD,8GCQO,MAAAN,EAAA,CAAA,CAAmB,UAAAf,EACxB,WAAAW,EACA,SAAAC,EACA,IAAAC,EACA,MAAAU,EACA,KAAAT,CAEF,IAAAK,EAIE,WACEnB,EACAwB,EAAA,CACK,gBAAAb,IAAA,OAC6B,iBAAAA,IAAA,QACC,eAAAC,IAAA,MACJ,kBAAAA,IAAA,SACG,eAAAC,EAChB,iBAAAU,EACE,gBAAAT,CACD,CAAA,CAErB,EAEFW,EAAAf,EAAA,WAAuB,CAAA,CAEnB,SAAAf,EACE,UAAAK,EACA,KAAA0B,EACA,WAAAf,EACA,SAAAC,EACA,IAAAC,EACA,MAAAU,EACA,KAAAT,EACA,UAAAf,EACA,GAAAG,CACG,EAAAK,IAILJ,EACE,MAAC,CAAA,KAAA,UACM,GAAAD,EACD,IAAAK,EACJ,aAAAR,EACY,UAAAgB,EAAA,CACS,UAAAf,EACnB,WAAAW,EACA,SAAAC,EACA,IAAAC,EACA,MAAAU,EACA,KAAAT,CACA,CAAA,EACD,SAAAY,EAAAC,EAAAC,EAAA,CAAA,SAAA,CAIGzB,EAAA,QAAA,CAAA,SAAA,EAAA,SAAAR,CAAA,CAAA,EAA8BQ,EAAA,KAAA,CAAA,UAAA,mBAAA,SAAAuB,EAAA,CACS,CAAA,CAAA,EAAAvB,EAAAyB,EAAA,CAAA,SAAAjC,CAAA,CAAA,CAG7B,CAAA,CAKtB,EAEAkC,EAAA,OAAA,OAAAJ,EAAA,CAAuC,QAAAT,EAC5B,OAAAtB,EACD,KAAAuB,EACF,KAAAI,CAER,CAAA"}