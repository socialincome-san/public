{"version":3,"file":"index-587fb902.js","sources":["../../src/Card/CardActions.tsx","../../src/Card/CardBody.tsx","../../src/Card/CardTitle.tsx","../../src/Card/CardImage.tsx","../../src/Card/Card.tsx"],"sourcesContent":["import React from 'react'\nimport { twMerge } from 'tailwind-merge'\nimport { IComponentBaseProps } from '../types'\n\nexport type CardActionsProps = React.HTMLAttributes<HTMLDivElement> &\n  IComponentBaseProps\n\nconst CardActions = React.forwardRef<HTMLDivElement, CardActionsProps>(\n  ({ className, ...props }, ref) => (\n    <div {...props} className={twMerge('card-actions', className)} ref={ref} />\n  )\n)\n\nexport default CardActions\n","import React from 'react'\nimport { twMerge } from 'tailwind-merge'\nimport { IComponentBaseProps } from '../types'\n\nexport type CardBodyProps = React.HTMLAttributes<HTMLDivElement> &\n  IComponentBaseProps\n\nconst CardBody = React.forwardRef<HTMLDivElement, CardBodyProps>(\n  ({ className, ...props }, ref) => (\n    <div {...props} className={twMerge('card-body', className)} ref={ref} />\n  )\n)\n\nexport default CardBody\n","import React, { ElementType } from 'react'\nimport { twMerge } from 'tailwind-merge'\nimport { IComponentBaseProps } from '../types'\n\nexport type CardTitleProps = React.HTMLAttributes<HTMLDivElement> &\n  IComponentBaseProps & {\n    tag?: ElementType\n  }\n\nconst CardTitle = React.forwardRef<HTMLElement, CardTitleProps>(\n  ({ className, tag = 'div', ...props }, ref) => {\n    const Tag = tag\n\n    return (\n      <Tag {...props} className={twMerge('card-title', className)} ref={ref} />\n    )\n  }\n)\n\nexport default CardTitle\n","import React from 'react'\n\nexport type CardImageProps = React.ImgHTMLAttributes<HTMLImageElement>\n\nconst CardImage = React.forwardRef<HTMLElement, CardImageProps>(\n  ({ ...props }, ref) => {\n    return (\n      <figure ref={ref}>\n        <img {...props} />\n      </figure>\n    )\n  }\n)\n\nexport default CardImage\n","import React from 'react'\nimport clsx from 'clsx'\nimport { twMerge } from 'tailwind-merge'\n\nimport { IComponentBaseProps, ComponentSize } from '../types'\n\nimport CardActions, { CardActionsProps as ActionProps } from './CardActions'\nimport CardBody, { CardBodyProps as BodyProps } from './CardBody'\nimport CardTitle, { CardTitleProps as TitleProps } from './CardTitle'\nimport CardImage, { CardImageProps as ImageProps } from './CardImage'\n\nexport type CardActionsProps = ActionProps\nexport type CardBodyProps = BodyProps\nexport type CardTitleProps = TitleProps\nexport type CardImageProps = ImageProps\n\nexport type CardProps = React.HTMLAttributes<HTMLDivElement> &\n  IComponentBaseProps & {\n    bordered?: boolean\n    imageFull?: boolean\n\n    // responsive props\n    normal?: ComponentSize | boolean // Applies default paddings\n    compact?: ComponentSize | boolean // Applies smaller padding\n    side?: ComponentSize | boolean // The image in <figure> will be on to the side\n  }\n\ninterface ModifierMap {\n  [key: string]: {\n    [key: string]: string | undefined\n  }\n}\n\nconst DYNAMIC_MODIFIERS: ModifierMap = {\n  compact: {\n    true: 'card-compact',\n    xs: 'xs:card-compact',\n    sm: 'sm:card-compact',\n    md: 'md:card-compact',\n    lg: 'lg:card-compact',\n  },\n  normal: {\n    true: 'card-normal',\n    xs: 'xs:card-normal',\n    sm: 'sm:card-normal',\n    md: 'md:card-normal',\n    lg: 'lg:card-normal',\n  },\n  side: {\n    true: 'card-side',\n    xs: 'xs:card-side',\n    sm: 'sm:card-side',\n    md: 'md:card-side',\n    lg: 'lg:card-side',\n  },\n}\n\nconst Card = React.forwardRef<HTMLDivElement, CardProps>(\n  (\n    { bordered = true, imageFull, normal, compact, side, className, ...props },\n    ref\n  ): JSX.Element => {\n    const classes = twMerge(\n      'card',\n      className,\n      clsx({\n        'card-bordered': bordered,\n        'image-full': imageFull,\n        [(compact && DYNAMIC_MODIFIERS.compact[compact.toString()]) || '']:\n          compact,\n        [(normal && DYNAMIC_MODIFIERS.normal[normal.toString()]) || '']: normal,\n        [(side && DYNAMIC_MODIFIERS.side[side.toString()]) || '']: side,\n      })\n    )\n\n    return <div aria-label=\"Card\" {...props} className={classes} ref={ref} />\n  }\n)\n\nexport default Object.assign(Card, {\n  Actions: CardActions,\n  Body: CardBody,\n  Title: CardTitle,\n  Image: CardImage,\n})\n"],"names":["CardActions","React","className","props","ref","jsx","twMerge","CardActions$1","CardBody","CardBody$1","CardTitle","tag","CardTitle$1","CardImage","CardImage$1","DYNAMIC_MODIFIERS","Card","bordered","imageFull","normal","compact","side","classes","clsx","Card$1"],"mappings":"mIAOA,MAAAA,EAAAC,EAAA,WAA0B,CAAA,CAAA,UAAAC,EAAA,GAAAC,CAAA,EAAAC,IAAAC,EAAA,MAAA,CAAA,GAAAF,EAAA,UAAAG,EAAA,eAAAJ,CAAA,EAAA,IAAAE,EAAA,CAI1B,EAEAG,EAAAP,0MCNA,MAAAQ,EAAAP,EAAA,WAAuB,CAAA,CAAA,UAAAC,EAAA,GAAAC,CAAA,EAAAC,IAAAC,EAAA,MAAA,CAAA,GAAAF,EAAA,UAAAG,EAAA,YAAAJ,CAAA,EAAA,IAAAE,EAAA,CAIvB,EAEAK,EAAAD,oMCJA,MAAAE,EAAAT,EAAA,WAAwB,CAAA,CAAA,UAAAC,EAAA,IAAAS,EAAA,MAAA,GAAAR,CAAA,EAAAC,IAIpBC,EAFAM,EAEA,CAAA,GAAAR,EAAA,UAAAG,EAAA,aAAAJ,CAAA,EAAA,IAAAE,CAAA,CAAA,CAIJ,EAEAQ,EAAAF,4SCfA,MAAAG,EAAAZ,EAAA,WAAwB,CAAA,CAAA,GAAAE,CAAA,EAAAC,IAEpBC,EAAA,SAAA,CAAA,IAAAD,EAAA,SAAAC,EAAA,MAAA,CAAA,GAAAF,CAAA,CAAA,CAAA,CAAA,CAMJ,EAEAW,EAAAD,wGCmBA,MAAAE,EAAA,CAAuC,QAAA,CAC5B,KAAA,eACD,GAAA,kBACF,GAAA,kBACA,GAAA,kBACA,GAAA,iBACA,EACN,OAAA,CACQ,KAAA,cACA,GAAA,iBACF,GAAA,iBACA,GAAA,iBACA,GAAA,gBACA,EACN,KAAA,CACM,KAAA,YACE,GAAA,eACF,GAAA,eACA,GAAA,eACA,GAAA,cACA,CAER,EAEAC,EAAAf,EAAA,WAAmB,CAAA,CAAA,SAAAgB,EAAA,GAAA,UAAAC,EAAA,OAAAC,EAAA,QAAAC,EAAA,KAAAC,EAAA,UAAAnB,EAAA,GAAAC,CAAA,EAAAC,IAAA,CAKf,MAAAkB,EAAAhB,EAAgB,OACdJ,EACAqB,EAAA,CACK,gBAAAN,EACc,aAAAC,EACH,CAAAE,GAAAL,EAAA,QAAAK,EAAA,SAAA,CAAA,GAAA,EAAA,EAAAA,EAEZ,CAAAD,GAAAJ,EAAA,OAAAI,EAAA,SAAA,CAAA,GAAA,EAAA,EAAAA,EAC+D,CAAAE,GAAAN,EAAA,KAAAM,EAAA,SAAA,CAAA,GAAA,EAAA,EAAAA,CACN,CAAA,CAC5D,EAGH,OAAAhB,EAAA,MAAA,CAAA,aAAA,OAAA,GAAAF,EAAA,UAAAmB,EAAA,IAAAlB,CAAA,CAAA,CAAuE,CAE3E,EAEAoB,EAAA,OAAA,OAAAR,EAAA,CAAmC,QAAAhB,EACxB,KAAAQ,EACH,MAAAE,EACC,MAAAG,CAET,CAAA"}