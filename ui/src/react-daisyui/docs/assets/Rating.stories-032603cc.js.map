{"version":3,"file":"Rating.stories-032603cc.js","sources":["../../src/Rating/RatingItem.tsx","../../src/Rating/Rating.tsx"],"sourcesContent":["import React from 'react'\n\nexport type RatingItemProps = React.InputHTMLAttributes<HTMLInputElement>\n\nconst RatingItem = ({ ...props }: RatingItemProps): JSX.Element => {\n  return <input {...props} type=\"checkbox\" />\n}\n\nexport default RatingItem\n","import React, {ReactElement} from 'react'\nimport clsx from 'clsx'\nimport { twMerge } from 'tailwind-merge'\n\nimport { IComponentBaseProps, ComponentSize } from '../types'\n\nimport RatingItem, { RatingItemProps } from './RatingItem'\n\nexport type RatingProps = Omit<\n    React.HTMLAttributes<HTMLDivElement>,\n    'onChange'\n  > &\n  IComponentBaseProps & {\n    size?: ComponentSize\n    half?: boolean\n    hidden?: boolean\n    value: number\n    onChange?: (newRating: number) => void\n  }\n\nconst Rating = React.forwardRef<HTMLDivElement, RatingProps>(\n  (\n    { children, size, half, hidden, dataTheme, className, value, onChange, ...props },\n    ref\n  ): JSX.Element => {\n    const classes = twMerge(\n      'rating',\n      className,\n      clsx({\n        'rating-lg': size === 'lg',\n        'rating-md': size === 'md',\n        'rating-sm': size === 'sm',\n        'rating-xs': size === 'xs',\n        'rating-half': half,\n        'rating-hidden': hidden || value === 0,\n      })\n    )\n\n    return (\n      <div\n        aria-label=\"Rating\"\n        {...props}\n        ref={ref}\n        data-theme={dataTheme}\n        className={classes}\n      >\n        {value === 0 && (\n          <RatingItem\n            className={clsx(classes, 'hidden')}\n            checked\n            readOnly\n          />\n        )}\n        {React.Children.map(children, (child, index) => {\n          const childComponent = child as ReactElement<RatingItemProps>\n          return React.cloneElement(childComponent, {\n            key: index + value,\n            checked: value === index + 1,\n            readOnly: onChange == null,\n            onChange: () => { onChange?.(index + 1) },\n          })\n        })}\n      </div>\n    )\n  }\n)\n\nexport default Object.assign(Rating, { Item: RatingItem })\n"],"names":["RatingItem","props","jsx","RatingItem$1","Rating","React","children","size","half","hidden","dataTheme","className","value","onChange","ref","classes","twMerge","clsx","jsxs","child","index","childComponent","Rating$1"],"mappings":"mLAIA,MAAAA,EAAA,CAAA,CAAA,GAAAC,KACEC,EAAA,QAAA,CAAA,GAAAD,EAAA,KAAA,UAAA,CAAA,EAGFE,EAAAH,0GCYA,MAAAI,EAAAC,EAAA,WAAqB,CAAA,CAAA,SAAAC,EAAA,KAAAC,EAAA,KAAAC,EAAA,OAAAC,EAAA,UAAAC,EAAA,UAAAC,EAAA,MAAAC,EAAA,SAAAC,EAAA,GAAAZ,CAAA,EAAAa,IAAA,CAKjB,MAAAC,EAAAC,EAAgB,SACdL,EACAM,EAAA,CACK,YAAAV,IAAA,KACmB,YAAAA,IAAA,KACA,YAAAA,IAAA,KACA,YAAAA,IAAA,KACA,cAAAC,EACP,gBAAAC,GAAAG,IAAA,CACsB,CAAA,CACtC,EAGH,OAAAM,EACE,MAAC,CAAA,aAAA,SACY,GAAAjB,EACP,IAAAa,EACJ,aAAAJ,EACY,UAAAK,EACD,SAAA,CAEVH,IAAA,GAAAV,EACCF,EAAC,CAAA,UAAAiB,EAAAF,EAAA,QAAA,EACkC,QAAA,GAC1B,SAAA,EACC,CAAA,EACVV,EAAA,SAAA,IAAAC,EAAA,CAAAa,EAAAC,IAAA,CAGA,MAAAC,EAAAF,EACA,OAAAd,EAAA,aAAAgB,EAAA,CAA0C,IAAAD,EAAAR,EAC3B,QAAAA,IAAAQ,EAAA,EACc,SAAAP,GAAA,KACL,SAAA,IAAA,CACJA,GAAA,MAAAA,EAAAO,EAAA,EAAoB,CAAE,CAAA,CACzC,CAAA,CACF,CAAA,CAAA,CACH,CAGN,EAEAE,EAAA,OAAA,OAAAlB,EAAA,CAAA,KAAAJ,CAAA,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}