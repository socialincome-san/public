{"version":3,"file":"index-667b0375.js","sources":["../../src/Collapse/CollapseDetails.tsx","../../src/Collapse/Collapse.tsx"],"sourcesContent":["import React from 'react'\n\nimport { classesFn, CollapseProps } from './Collapse'\nimport { Summary } from './CollapseTitle'\n\nexport type DetailsProps = Omit<\n  CollapseProps<HTMLDetailsElement>,\n  'checkbox' | 'onOpen' | 'onClose' | 'onToggle'\n>\nconst Details = React.forwardRef<HTMLDetailsElement, DetailsProps>(\n  (\n    { children, icon, open, dataTheme, className, ...props },\n    ref\n  ): JSX.Element => {\n    return (\n      <details\n        {...props}\n        ref={ref}\n        data-theme={dataTheme}\n        className={classesFn({ className, icon, open })}\n        open={open}\n      >\n        {children}\n      </details>\n    )\n  }\n)\n\nDetails.displayName = 'Details'\nexport default Object.assign(Details, { Title: Summary })\n","import React, { useRef, useState } from 'react'\nimport clsx from 'clsx'\nimport { twMerge } from 'tailwind-merge'\n\nimport { IComponentBaseProps } from '../types'\n\nimport CollapseDetails from './CollapseDetails'\nimport CollapseTitle from './CollapseTitle'\nimport CollapseContent from './CollapseContent'\n\nexport type CollapseProps<T extends HTMLElement = HTMLDivElement> =\n  React.HTMLAttributes<T> &\n    IComponentBaseProps & {\n      checkbox?: boolean\n      icon?: 'arrow' | 'plus'\n      open?: boolean\n      onOpen?: () => void\n      onClose?: () => void\n      onToggle?: () => void\n    }\n\nexport const classesFn = ({\n  className,\n  icon,\n  open,\n}: Pick<CollapseProps, 'className' | 'icon' | 'open'>) =>\n  twMerge(\n    'collapse',\n    className,\n    clsx({\n      'collapse-arrow': icon === 'arrow',\n      'collapse-plus': icon === 'plus',\n      'collapse-open': open === true,\n      'collapse-close': open === false,\n    })\n  )\n\nconst Collapse = React.forwardRef<HTMLDivElement, CollapseProps>(\n  (\n    {\n      children,\n      checkbox,\n      icon,\n      open,\n      dataTheme,\n      className,\n      onOpen,\n      onClose,\n      onToggle,\n      ...props\n    },\n    ref\n  ): JSX.Element => {\n    const [isChecked, setIsChecked] = useState(open)\n    const checkboxRef = useRef<HTMLInputElement>(null)\n\n    // Handle events for checkbox changes\n    const handleCheckboxChange = () => {\n      if (onToggle) {\n        onToggle()\n      }\n      if (onOpen && checkboxRef.current?.checked) {\n        onOpen()\n      } else if (onClose && !checkboxRef.current?.checked) {\n        onClose()\n      }\n\n      setIsChecked(checkboxRef.current?.checked)\n    }\n\n    // Handle blur events, specifically handling open/close for non checkbox types\n    const handleBlur = (event: React.FocusEvent<HTMLDivElement, Element>) => {\n      if (!checkbox && onToggle) onToggle()\n      if (!checkbox && onClose) onClose()\n      if (props.onBlur) props.onBlur(event)\n    }\n\n    // Handle focus events, specifically handling open/close for non checkbox types\n    const handleFocus = (event: React.FocusEvent<HTMLDivElement, Element>) => {\n      if (!checkbox && onToggle) onToggle()\n      if (!checkbox && onOpen) onOpen()\n      if (props.onFocus) props.onFocus(event)\n    }\n\n    return (\n      <div\n        aria-expanded={open}\n        {...props}\n        ref={ref}\n        tabIndex={isChecked === true ? undefined : 0}\n        data-theme={dataTheme}\n        className={classesFn({ className, icon, open })}\n        onBlur={handleBlur}\n        onFocus={handleFocus}\n      >\n        {checkbox && (\n          <input\n            type=\"checkbox\"\n            tabIndex={isChecked === true ? 0 : undefined}\n            className=\"peer\"\n            ref={checkboxRef}\n            onChange={handleCheckboxChange}\n          />\n        )}\n        {children}\n      </div>\n    )\n  }\n)\n\nexport default Object.assign(Collapse, {\n  Details: CollapseDetails,\n  Title: CollapseTitle,\n  Content: CollapseContent,\n})\n"],"names":["Details","React","children","icon","open","dataTheme","className","props","ref","jsx","classesFn","CollapseDetails","Summary","twMerge","clsx","Collapse","checkbox","onOpen","onClose","onToggle","isChecked","setIsChecked","useState","checkboxRef","useRef","handleCheckboxChange","_a","_b","_c","handleBlur","event","handleFocus","jsxs","Collapse$1","CollapseTitle","CollapseContent"],"mappings":"iNASA,MAAAA,EAAAC,EAAA,WAAsB,CAAA,CAAA,SAAAC,EAAA,KAAAC,EAAA,KAAAC,EAAA,UAAAC,EAAA,UAAAC,EAAA,GAAAC,CAAA,EAAAC,IAKlBC,EACE,UAAC,CAAA,GAAAF,EACK,IAAAC,EACJ,aAAAH,EACY,UAAAK,EAAA,CAAA,UAAAJ,EAAA,KAAAH,EAAA,KAAAC,CAAA,CAAA,EACkC,KAAAA,EAC9C,SAAAF,CAEC,CAAA,CAIT,EAEAF,EAAA,YAAA,UACA,MAAAW,EAAA,OAAA,OAAAX,EAAA,CAAA,MAAAY,CAAA,CAAA,sZCRO,MAAAF,EAAA,CAAA,CAAmB,UAAAJ,EACxB,KAAAH,EACA,KAAAC,CAEF,IAAAS,EACE,WACEP,EACAQ,EAAA,CACK,iBAAAX,IAAA,QACwB,gBAAAA,IAAA,OACD,gBAAAC,IAAA,GACA,iBAAAA,IAAA,EACC,CAAA,CAE/B,EAEFW,EAAAd,EAAA,WAAuB,CAAA,CAEnB,SAAAC,EACE,SAAAc,EACA,KAAAb,EACA,KAAAC,EACA,UAAAC,EACA,UAAAC,EACA,OAAAW,EACA,QAAAC,EACA,SAAAC,EACA,GAAAZ,CACG,EAAAC,IAAA,CAIL,KAAA,CAAAY,EAAAC,CAAA,EAAAC,EAAA,SAAAlB,CAAA,EACAmB,EAAAC,SAAA,IAAA,EAGAC,EAAA,IAAA,WACEN,GACEA,IAEFF,KAAAS,EAAAH,EAAA,UAAA,MAAAG,EAAA,SACET,IAAOC,GAAA,GAAAS,EAAAJ,EAAA,UAAA,MAAAI,EAAA,UAEPT,IAGFG,GAAAO,EAAAL,EAAA,UAAA,YAAAK,EAAA,OAAA,CAAyC,EAI3CC,EAAAC,GAAA,CACE,CAAAd,GAAAG,GAA2BA,IAC3B,CAAAH,GAAAE,GAA0BA,IAC1BX,EAAA,QAAkBA,EAAA,OAAAuB,CAAA,CAAkB,EAItCC,EAAAD,GAAA,CACE,CAAAd,GAAAG,GAA2BA,IAC3B,CAAAH,GAAAC,GAAyBA,IACzBV,EAAA,SAAmBA,EAAA,QAAAuB,CAAA,CAAmB,EAGxC,OAAAE,EACE,MAAC,CAAA,gBAAA5B,EACgB,GAAAG,EACX,IAAAC,EACJ,SAAAY,IAAA,GAAA,OAAA,EAC2C,aAAAf,EAC/B,UAAAK,EAAA,CAAA,UAAAJ,EAAA,KAAAH,EAAA,KAAAC,CAAA,CAAA,EACkC,OAAAyB,EACtC,QAAAE,EACC,SAAA,CAERf,GAAAP,EACC,QAAC,CAAA,KAAA,WACM,SAAAW,IAAA,GAAA,EAAA,OAC8B,UAAA,OACzB,IAAAG,EACL,SAAAE,CACK,CAAA,EACZvB,CAED,CAAA,CAAA,CACH,CAGN,EAEA+B,EAAA,OAAA,OAAAlB,EAAA,CAAuC,QAAAJ,EAC5B,MAAAuB,EACF,QAAAC,CAET,CAAA"}