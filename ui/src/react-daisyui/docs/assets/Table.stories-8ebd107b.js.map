{"version":3,"file":"Table.stories-8ebd107b.js","sources":["../../src/Table/TableHead.tsx","../../src/Table/TableBody.tsx","../../src/Table/TableRow.tsx","../../src/Table/TableFooter.tsx","../../src/Table/Table.tsx"],"sourcesContent":["import React, { ReactNode } from 'react'\n\nexport type TableHeadProps =\n  React.TableHTMLAttributes<HTMLTableSectionElement> & {\n    children?: ReactNode[]\n  }\n\nconst TableHead = React.forwardRef<HTMLTableSectionElement, TableHeadProps>(\n  ({ children, ...props }, ref): JSX.Element => {\n    return (\n      <thead {...props} ref={ref}>\n        <tr>\n          {children?.map((child, i) => {\n            return <th key={i}>{child}</th>\n          })}\n        </tr>\n      </thead>\n    )\n  }\n)\nexport default TableHead\n","import React from 'react'\n\nexport type TableBodyProps = React.TableHTMLAttributes<HTMLTableSectionElement>\n\nconst TableBody = React.forwardRef<HTMLTableSectionElement, TableBodyProps>(\n  ({ children, ...props }, ref): JSX.Element => {\n    return (\n      <tbody {...props} ref={ref}>\n        {children}\n      </tbody>\n    )\n  }\n)\nexport default TableBody\n","import React, { ReactElement } from 'react'\nimport clsx from 'clsx'\nimport { twMerge } from 'tailwind-merge'\n\nimport { IComponentBaseProps } from '../types'\n\nexport type TableRowProps = React.TableHTMLAttributes<HTMLTableRowElement> &\n  IComponentBaseProps & {\n    children?: ReactElement[]\n    active?: boolean\n    hover?: boolean\n  }\n\nconst TableRow = React.forwardRef<HTMLTableRowElement, TableRowProps>(\n  ({ children, active, hover, className, ...props }, ref): JSX.Element => {\n    const classes = twMerge(\n      className,\n      clsx({\n        active: active,\n        hover: hover,\n      })\n    )\n\n    return (\n      <tr {...props} className={classes} ref={ref}>\n        {children?.map((child, i) => \n          i < 1 ? <th key={i}>{child}</th> : <td key={i}>{child}</td>\n        )}\n      </tr>\n    )\n  }\n)\n\nexport default TableRow\n","import React, { ReactElement } from 'react'\n\nimport { IComponentBaseProps } from '../types'\n\nexport type TableFooterProps =\n  React.TableHTMLAttributes<HTMLTableSectionElement> &\n    IComponentBaseProps & {\n      children?: ReactElement[]\n    }\n\nconst TableFooter = React.forwardRef<HTMLTableSectionElement, TableFooterProps>(\n  ({ children, ...props }, ref): JSX.Element => {\n    return (\n      <tfoot {...props} ref={ref}>\n        <tr>\n          {children?.map((child, i) => {\n            return <th key={i}>{child}</th>\n          })}\n        </tr>\n      </tfoot>\n    )\n  }\n)\n\nexport default TableFooter\n","import React from 'react'\nimport clsx from 'clsx'\nimport { twMerge } from 'tailwind-merge'\n\nimport { IComponentBaseProps, ComponentSize } from '../types'\n\nimport TableHead from './TableHead'\nimport TableBody from './TableBody'\nimport TableRow from './TableRow'\nimport TableFooter from './TableFooter'\n\nexport type TableProps = React.TableHTMLAttributes<HTMLTableElement> &\n  IComponentBaseProps & {\n    size?: ComponentSize\n    zebra?: boolean\n    pinRows?: boolean\n    pinCols?: boolean\n  }\n\nconst Table = React.forwardRef<HTMLTableElement, TableProps>(\n  (\n    { children, size, zebra, pinRows, pinCols, dataTheme, className, ...props },\n    ref\n  ): JSX.Element => {\n    const classes = twMerge(\n      'table',\n      className,\n      clsx({\n        'table-zebra': zebra,\n        'table-lg': size === 'lg',\n        'table-md': size === 'md',\n        'table-sm': size === 'sm',\n        'table-xs': size === 'xs',\n        'table-pin-rows': pinRows,\n        'table-pin-cols': pinCols,\n      })\n    )\n\n    return (\n      <table {...props} data-theme={dataTheme} className={classes} ref={ref}>\n        {children}\n      </table>\n    )\n  }\n)\n\nexport default Object.assign(Table, {\n  Head: TableHead,\n  Body: TableBody,\n  Row: TableRow,\n  Footer: TableFooter,\n})\n"],"names":["TableHead","React","children","props","ref","jsx","child","i","TableHead$1","TableBody","TableBody$1","TableRow","active","hover","className","classes","twMerge","clsx","TableRow$1","TableFooter","TableFooter$1","Table","size","zebra","pinRows","pinCols","dataTheme","Table$1"],"mappings":"yUAOA,MAAAA,EAAAC,EAAA,WAAwB,CAAA,CAAA,SAAAC,EAAA,GAAAC,CAAA,EAAAC,IAEpBC,EAAA,QAAA,CAAA,GAAAF,EAAA,IAAAC,EAAA,SAAAC,EAAA,KAAA,CAAA,SAAAH,GAAA,YAAAA,EAAA,IAAA,CAAAI,EAAAC,IAIQF,EAAA,KAAA,CAAA,SAAAC,CAAA,EAAAC,CAAA,EAA0B,CAAA,CAAA,CAAA,CAMtC,EACAC,GAAAR,wGChBA,MAAAS,EAAAR,EAAA,WAAwB,CAAA,CAAA,SAAAC,EAAA,GAAAC,CAAA,EAAAC,IAEpBC,EAAA,QAAA,CAAA,GAAAF,EAAA,IAAAC,EAAA,SAAAF,CAAA,CAAA,CAMJ,EACAQ,GAAAD,wGCAA,MAAAE,EAAAV,EAAA,WAAuB,CAAA,CAAA,SAAAC,EAAA,OAAAU,EAAA,MAAAC,EAAA,UAAAC,EAAA,GAAAX,CAAA,EAAAC,IAAA,CAEnB,MAAAW,EAAAC,GAAgBF,EACdG,GAAA,CACK,OAAAL,EACH,MAAAC,CACA,CAAA,CACD,EAGH,OAAAR,EAAA,KAAA,CAAA,GAAAF,EAAA,UAAAY,EAAA,IAAAX,EAAA,SAAAF,GAAA,YAAAA,EAAA,IAEe,CAAAI,EAAAC,IAAAA,EAAA,EAAAF,EAAA,KAAA,CAAA,SAAAC,CAAA,EAAAC,CAAA,EAAAF,EAAA,KAAA,CAAA,SAAAC,CAAA,EAAAC,CAAA,EAC6C,CAAA,CAE1D,CAGN,EAEAW,GAAAP,sXCvBA,MAAAQ,EAAAlB,EAAA,WAA0B,CAAA,CAAA,SAAAC,EAAA,GAAAC,CAAA,EAAAC,IAEtBC,EAAA,QAAA,CAAA,GAAAF,EAAA,IAAAC,EAAA,SAAAC,EAAA,KAAA,CAAA,SAAAH,GAAA,YAAAA,EAAA,IAAA,CAAAI,EAAAC,IAIQF,EAAA,KAAA,CAAA,SAAAC,CAAA,EAAAC,CAAA,EAA0B,CAAA,CAAA,CAAA,CAMtC,EAEAa,GAAAD,0MCLA,MAAAE,EAAApB,EAAA,WAAoB,CAAA,CAAA,SAAAC,EAAA,KAAAoB,EAAA,MAAAC,EAAA,QAAAC,EAAA,QAAAC,EAAA,UAAAC,EAAA,UAAAZ,EAAA,GAAAX,CAAA,EAAAC,IAAA,CAKhB,MAAAW,GAAAC,GAAgB,QACdF,EACAG,GAAA,CACK,cAAAM,EACY,WAAAD,IAAA,KACM,WAAAA,IAAA,KACA,WAAAA,IAAA,KACA,WAAAA,IAAA,KACA,iBAAAE,EACH,iBAAAC,CACA,CAAA,CACnB,EAGH,OAAApB,EAAA,QAAA,CAAA,GAAAF,EAAA,aAAAuB,EAAA,UAAAX,GAAA,IAAAX,EAAA,SAAAF,CAAA,CAAA,CAGE,CAGN,EAEAyB,EAAA,OAAA,OAAAN,EAAA,CAAoC,KAAAr}