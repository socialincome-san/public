name: Build and Deploy Portal to GCP via Terraform

on:
  push:
    branches:
      - feat/gcp-poc
      - feat/gcp-poc-with-website
      - feat/gcp-poc-with-website-refactored

env:
  ENVIRONMENT: staging
  APP_NAME: portal
  GCP_PROJECT_ID: social-income-poc
  GCP_REGION: europe-west6
  ARTIFACT_REGISTRY_NAME: staging-portal-google-artifact-registry-repository
  TERRAFORM_DIR: portal/infra

jobs:
  deploy:
    name: Build and Deploy Portal to GCP via Terraform
    runs-on: ubuntu-latest

    steps:
      - name: 📦 Checkout repository
        uses: actions/checkout@v3

      - name: 🔐 Authenticate with Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.TF_STAGING_TERRAFORM_DEPLOYER_CREDENTIALS }}

      - name: ⚙️ Configure Docker to use Artifact Registry
        run: |
          echo "🛠 Configuring Docker authentication for Artifact Registry"
          gcloud auth configure-docker $GCP_REGION-docker.pkg.dev --quiet

      - name: 🧰 Set up Terraform CLI
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.6.6

      - name: 📝 Prepare Docker build secrets
        run: |
          mkdir -p secrets
          keys=(
            BASE_URL
            FIREBASE_DATABASE_URL
            FIREBASE_SERVICE_ACCOUNT_JSON
            GITHUB_PAT
            MAILCHIMP_API_KEY
            MAILCHIMP_LIST_ID
            MAILCHIMP_SERVER
            NEXT_PUBLIC_FIREBASE_API_KEY
            NEXT_PUBLIC_FIREBASE_APP_ID
            NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN
            NEXT_PUBLIC_FIREBASE_MEASUREMENT_ID
            NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID
            NEXT_PUBLIC_FIREBASE_PROJECT_ID
            NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET
            SENDGRID_API_KEY
            SENDGRID_LIST_ID
            SENDGRID_SUPPRESSION_LIST_ID
            STORYBLOK_PREVIEW_SECRET
            STORYBLOK_PREVIEW_TOKEN
            STRIPE_PRODUCT_ONETIME
            STRIPE_PRODUCT_RECURRING
            STRIPE_SECRET_KEY
            VERCEL_URL
          )
          for key in "${keys[@]}"; do
            echo "${{ secrets['TF_STAGING_' + key] }}" > "secrets/$key"
          done

      - name: 📤 Build and Push Docker Image
        env:
          IMAGE_URL: "${{ env.GCP_REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.ARTIFACT_REGISTRY_NAME }}/${{ env.APP_NAME }}:${{ github.sha }}"
        run: |
          echo "📤 Building Docker image: $IMAGE_URL"
          docker buildx build \
            --platform linux/amd64 \
            --tag "$IMAGE_URL" \
            --push \
            -f portal/Dockerfile \
            $(for f in secrets/*; do echo "--secret id=$(basename "$f"),src=$f"; done) \
            .

          echo "🚀 Image built and pushed."

      - name: 🌱 Terraform Init, Validate & Apply
        env:
          TF_VAR_env: ${{ env.ENVIRONMENT }}
          TF_VAR_app_name: ${{ env.APP_NAME }}
          TF_VAR_gcp_project_id: ${{ env.GCP_PROJECT_ID }}
          TF_VAR_gcp_region: ${{ env.GCP_REGION }}
          TF_VAR_google_sql_db_password: ${{ secrets.TF_STAGING_GOOGLE_SQL_DB_PASSWORD }}
          IMAGE_URL: "${{ env.GCP_REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.ARTIFACT_REGISTRY_NAME }}/${{ env.APP_NAME }}:${{ github.sha }}"
        run: |
          echo "🧭 Initializing Terraform..."
          terraform -chdir=${{ env.TERRAFORM_DIR }} init -backend-config="_staging.tfbackend"

          echo "🧪 Checking formatting..."
          terraform -chdir=${{ env.TERRAFORM_DIR }} fmt -check

          echo "🧪 Validating configuration..."
          terraform -chdir=${{ env.TERRAFORM_DIR }} validate

          echo "🚀 Applying Terraform changes..."
          terraform -chdir=${{ env.TERRAFORM_DIR }} apply -auto-approve -input=false \
            -var="docker_image_url=$IMAGE_URL"

          echo "✅ Terraform applied successfully."

      - name: 🌍 Print Cloud Run URL
        run: |
          echo "Fetching Cloud Run URL from Terraform output..."
          CLOUD_RUN_URL=$(terraform -chdir=${{ env.TERRAFORM_DIR }} output -raw cloud_run_url)

          echo "✅ Your app is live at:"
          echo "$CLOUD_RUN_URL"

          echo "### 🚀 Cloud Run deployed to: [$CLOUD_RUN_URL]($CLOUD_RUN_URL)" >> $GITHUB_STEP_SUMMARY