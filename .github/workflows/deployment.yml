name: Deployment

on:
  workflow_call:
    inputs:
      component:
        description: The component to deploy (admin|functions|rules)
        type: string
        required: true
      project:
        description: The Firebase project to deploy to (social-income-staging|social-income-prod)
        type: string
        required: true

jobs:
  deploy-admin:
    name: Deploy admin on Firebase
    runs-on: ubuntu-latest
    if: inputs.component == 'admin'
    env:
      VITE_WEBSITE_BASE_URL: ${{ (inputs.project == 'social-income-prod' && 'https://socialincome.org') || 'https://staging.socialincome.org' }}
      VITE_ADMIN_ALGOLIA_APPLICATION_ID: ${{ secrets.REACT_APP_ADMIN_ALGOLIA_APPLICATION_ID }}
      VITE_ADMIN_ALGOLIA_SEARCH_KEY: ${{ secrets.REACT_APP_ADMIN_ALGOLIA_SEARCH_KEY }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Initialize repository
        uses: ./.github/workflows/actions/init
        with:
          project: ${{ inputs.project }}
          firebaseServiceAccountJSON: ${{ (inputs.project == 'social-income-prod' && secrets.FIREBASE_SERVICE_ACCOUNT_SOCIAL_INCOME_PROD) || secrets.FIREBASE_SERVICE_ACCOUNT_SOCIAL_INCOME_STAGING }}

      - name: Build admin
        run: npm run admin:build

      - name: Deploy preview on Firebase (social-income-staging)
        if: ${{ inputs.project == 'social-income-staging' && github.ref != 'refs/heads/main' }}
        uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          repoToken: "${{ secrets.GITHUB_TOKEN }}"
          firebaseServiceAccount: "${{ secrets.FIREBASE_SERVICE_ACCOUNT_SOCIAL_INCOME_STAGING }}"
          projectId: social-income-staging
          target: admin

      - name: Deploy on Firebase (social-income-staging)
        if: ${{ inputs.project == 'social-income-staging' && github.ref == 'refs/heads/main' }}
        uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          repoToken: "${{ secrets.GITHUB_TOKEN }}"
          firebaseServiceAccount: "${{ secrets.FIREBASE_SERVICE_ACCOUNT_SOCIAL_INCOME_STAGING }}"
          projectId: social-income-staging
          target: admin
          channelId: live

      - name: Deploy on Firebase (social-income-prod)
        if: inputs.project == 'social-income-prod'
        uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          repoToken: "${{ secrets.GITHUB_TOKEN }}"
          firebaseServiceAccount: "${{ secrets.FIREBASE_SERVICE_ACCOUNT_SOCIAL_INCOME_PROD }}"
          projectId: social-income-prod
          target: admin
          channelId: live

  deploy-functions:
    name: Deploy functions on Firebase
    runs-on: ubuntu-latest
    if: inputs.component == 'functions'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Initialize repository
        uses: ./.github/workflows/actions/init
        with:
          project: ${{ inputs.project }}
          firebaseServiceAccountJSON: ${{ (inputs.project == 'social-income-prod' && secrets.FIREBASE_SERVICE_ACCOUNT_SOCIAL_INCOME_PROD) || secrets.FIREBASE_SERVICE_ACCOUNT_SOCIAL_INCOME_STAGING }}

      - name: Add secrets to functions/.env file
        working-directory: functions
        run: |
          echo POSTFINANCE_EMAIL_PASSWORD=${{ secrets.POSTFINANCE_EMAIL_PASSWORD }} > .env
          echo POSTFINANCE_PAYMENTS_FILES_BUCKET=${{ (inputs.project == 'social-income-prod' && vars.POSTFINANCE_PAYMENTS_FILES_BUCKET) || vars.POSTFINANCE_PAYMENTS_FILES_BUCKET_STAGING }} >> .env
          echo POSTFINANCE_FTP_HOST=${{ vars.POSTFINANCE_FTP_HOST }} >> .env
          echo POSTFINANCE_FTP_PORT=${{ vars.POSTFINANCE_FTP_PORT }} >> .env
          echo POSTFINANCE_FTP_USER=${{ vars.POSTFINANCE_FTP_USER }} >> .env
          echo POSTFINANCE_FTP_RSA_PRIVATE_KEY_BASE64=${{ secrets.POSTFINANCE_FTP_RSA_PRIVATE_KEY_BASE64 }} >> .env
          echo STRIPE_API_READ_KEY=${{ (inputs.project == 'social-income-prod' && secrets.STRIPE_API_READ_KEY) || secrets.STRIPE_API_READ_KEY_STAGING }} >> .env
          echo STRIPE_WEBHOOK_SECRET=${{ (inputs.project == 'social-income-prod' && secrets.STRIPE_WEBHOOK_SECRET) || secrets.STRIPE_WEBHOOK_SECRET_STAGING }} >> .env
          echo NOTIFICATION_EMAIL_USER=${{ secrets.NOTIFICATION_EMAIL_USER }} >> .env
          echo NOTIFICATION_EMAIL_PASSWORD=${{ secrets.NOTIFICATION_EMAIL_PASSWORD }} >> .env
          echo NOTIFICATION_EMAIL_USER_KERRIN=${{ secrets.NOTIFICATION_EMAIL_USER_KERRIN }} >> .env
          echo NOTIFICATION_EMAIL_PASSWORD_KERRIN=${{ secrets.NOTIFICATION_EMAIL_PASSWORD_KERRIN }} >> .env
          echo TWILIO_SID=${{ secrets.TWILIO_SID }} >> .env
          echo TWILIO_TOKEN=${{ secrets.TWILIO_TOKEN }} >> .env
          echo TWILIO_SENDER_PHONE=${{ secrets.TWILIO_SENDER_PHONE }} >> .env
          echo POSTFINANCE_EMAIL_USER=${{ secrets.POSTFINANCE_EMAIL_USER }} >> .env
          echo EXCHANGE_RATES_API=${{ secrets.EXCHANGE_RATES_API }} >> .env

      - name: Build functions
        run: npm run functions:build

      - name: Deploy on Firebase (${{ inputs.project }})
        run: GOOGLE_APPLICATION_CREDENTIALS=credentials.json firebase deploy --only functions --project ${{ inputs.project }}

  deploy-rules:
    name: Deploy rules on Firebase
    runs-on: ubuntu-latest
    if: inputs.component == 'rules'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Initialize repository
        uses: ./.github/workflows/actions/init
        with:
          installDependencies: "false"
          project: ${{ inputs.project }}
          firebaseServiceAccountJSON: ${{ (inputs.project == 'social-income-prod' && secrets.FIREBASE_SERVICE_ACCOUNT_SOCIAL_INCOME_PROD) || secrets.FIREBASE_SERVICE_ACCOUNT_SOCIAL_INCOME_STAGING }}

      - name: Deploy on Firebase (${{ inputs.project }})
        run: GOOGLE_APPLICATION_CREDENTIALS=credentials.json firebase deploy --only firestore:rules --project ${{ inputs.project }}
