{"version":3,"file":"TextField-406067e0.js","sources":["../../../node_modules/@heroicons/react/24/solid/esm/ExclamationCircleIcon.js","../../src/components/text-field/TextField.tsx"],"sourcesContent":["import * as React from \"react\";\nfunction ExclamationCircleIcon({\n  title,\n  titleId,\n  ...props\n}, svgRef) {\n  return /*#__PURE__*/React.createElement(\"svg\", Object.assign({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    viewBox: \"0 0 24 24\",\n    fill: \"currentColor\",\n    \"aria-hidden\": \"true\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, /*#__PURE__*/React.createElement(\"path\", {\n    fillRule: \"evenodd\",\n    d: \"M2.25 12c0-5.385 4.365-9.75 9.75-9.75s9.75 4.365 9.75 9.75-4.365 9.75-9.75 9.75S2.25 17.385 2.25 12zM12 8.25a.75.75 0 01.75.75v3.75a.75.75 0 01-1.5 0V9a.75.75 0 01.75-.75zm0 8.25a.75.75 0 100-1.5.75.75 0 000 1.5z\",\n    clipRule: \"evenodd\"\n  }));\n}\nconst ForwardRef = React.forwardRef(ExclamationCircleIcon);\nexport default ForwardRef;","import { ExclamationCircleIcon } from '@heroicons/react/24/solid';\nimport classNames from 'classnames';\n\nexport const SO_TEXT_FIELD_SIZES = ['base', 'xl'] as const;\n\nexport type SoTextFieldProps = SoSinglelineTextFieldProps | SoMultilineTextFieldProps;\n\ntype SoSinglelineTextFieldProps = React.InputHTMLAttributes<HTMLInputElement> & SoBaseTextFieldProps;\ntype SoMultilineTextFieldProps = Omit<React.TextareaHTMLAttributes<HTMLTextAreaElement>, 'size'> & SoBaseTextFieldProps;\n\ninterface SoBaseTextFieldProps {\n\t/**\n\t * An ID unique to this field when rendered on the same page as other fields\n\t */\n\tid: string; // Make required\n\n\t/**\n\t * Text label for the field\n\t */\n\tlabel: string;\n\n\t/**\n\t * Modifier classes for the input field\n\t */\n\tinputClassName?: string;\n\n\t/**\n\t * Modifier classes for the label\n\t */\n\tlabelClassName?: string;\n\n\t/**\n\t * If true, makes the label only available to screen readers.\n\t * Use with caution as it has usability/accessibility drawbacks\n\t * for users.\n\t */\n\tlabelHidden?: boolean;\n\n\t/**\n\t * Field is invalid\n\t */\n\terror?: boolean;\n\n\t/**\n\t * Display validation message or help\n\t */\n\thelp?: string;\n\n\t/**\n\t * Optional icon rendered on the left of the text field\n\t */\n\ticonLeft?: React.ReactNode;\n\n\t/**\n\t * Visual size of the text field\n\t */\n\tsize?: (typeof SO_TEXT_FIELD_SIZES)[number];\n\n\t/**\n\t * Render full width\n\t */\n\tblock?: boolean;\n\n\t/**\n\t * If true, the \"optional\" label is hidden even when the field is not \"required\".\n\t * That's useful for single form fields not belonging to a long-form.\n\t * In long-forms, it's better to only mark the optional ones and assume the rest\n\t * is required and therefore, not mark 'required' fields when the majority of them are.\n\t */\n\toptionalLabelHidden?: boolean;\n\n\t/**\n\t * If true, is rendered as a HTMLTextAreaElement\n\t */\n\tmultiline?: boolean;\n}\n\n/**\n * Social Income component to render HTMLInputElement and HTMLTextAreaElement, used for any type of single and multiline fields.\n */\nexport const SoTextField = (props: SoTextFieldProps) => {\n\tconst {\n\t\tid,\n\t\tlabel,\n\t\tclassName = '',\n\t\tinputClassName = '',\n\t\tlabelClassName = '',\n\t\tlabelHidden,\n\t\toptionalLabelHidden,\n\t\tvalue = '',\n\t\tsize = 'base',\n\t\tblock,\n\t\terror,\n\t\thelp,\n\t\ticonLeft,\n\t\tmultiline,\n\t\t...inputProps\n\t} = props;\n\tconst ariaInvalid = error;\n\tconst ariaDescribedBy = ariaInvalid ? `${id}-helper-text` : null;\n\n\tconst fieldWrapperClasses = classNames(\n\t\t{\n\t\t\t'inline-block': !block,\n\t\t},\n\t\tclassName\n\t);\n\n\tconst labelClasses = classNames(\n\t\t'inline-flex',\n\t\t'gap-1',\n\t\t'font-medium',\n\t\t'text-gray-700',\n\t\t'mb-1',\n\t\t{ 'sr-only': labelHidden },\n\t\tlabelClassName\n\t);\n\n\tconst inputWrapperClasses = classNames('relative', 'flex-col', {\n\t\t'inline-flex': !block,\n\t\tflex: block,\n\t\t'w-full': block,\n\t});\n\n\tconst inputClasses = classNames(\n\t\t'relative',\n\t\t'rounded-lg',\n\t\t'border',\n\t\t'border-gray-300',\n\t\t'bg-white',\n\t\t'p-3',\n\t\t'pl-3',\n\t\t'pr-10',\n\t\t'text-left',\n\t\t'transition',\n\t\t`text-${size}`,\n\t\t{ 'pl-10': iconLeft },\n\t\t{ 'text-gray-900': !props?.disabled },\n\t\t{ 'text-gray-600': props?.disabled },\n\t\t{ 'hover:shadow-lg': !props?.disabled, 'hover:shadow-gray-200': !props?.disabled },\n\t\t{ 'w-full': block },\n\t\t{ 'bg-gray-100': props?.disabled },\n\t\tinputClassName\n\t);\n\n\tconst helpClasses = classNames('mt-1', {\n\t\t'text-red-600': ariaInvalid,\n\t\t'text-gray-600': !ariaInvalid,\n\t});\n\n\tconst labelElement = (\n\t\t<label htmlFor={id} className={labelClasses}>\n\t\t\t{label}\n\t\t\t{!props?.required && !optionalLabelHidden && (\n\t\t\t\t<span className={classNames('text-gray-500')} aria-hidden=\"true\">\n\t\t\t\t\t(optional)\n\t\t\t\t</span>\n\t\t\t)}\n\t\t</label>\n\t);\n\n\tconst helpElement = (\n\t\t<p id={ariaDescribedBy} className={helpClasses}>\n\t\t\t{help}\n\t\t</p>\n\t);\n\n\treturn (\n\t\t<div className={fieldWrapperClasses} data-testid=\"so-text-field\">\n\t\t\t<div className={inputWrapperClasses}>\n\t\t\t\t{labelElement}\n\t\t\t\t{iconLeft && (\n\t\t\t\t\t<span aria-hidden=\"true\" className=\"w-6 h-6 inline-block absolute left-2 top-10 z-10 text-gray-500\">\n\t\t\t\t\t\t{iconLeft}\n\t\t\t\t\t</span>\n\t\t\t\t)}\n\n\t\t\t\t{isMultilineTextField(props) ? (\n\t\t\t\t\t<textarea\n\t\t\t\t\t\tid={id}\n\t\t\t\t\t\tclassName={inputClasses}\n\t\t\t\t\t\taria-invalid={ariaInvalid}\n\t\t\t\t\t\taria-describedby={ariaDescribedBy}\n\t\t\t\t\t\taria-errormessage={ariaDescribedBy}\n\t\t\t\t\t\t{...props}\n\t\t\t\t\t>\n\t\t\t\t\t\t{value}\n\t\t\t\t\t</textarea>\n\t\t\t\t) : (\n\t\t\t\t\t<input\n\t\t\t\t\t\tid={id}\n\t\t\t\t\t\tclassName={inputClasses}\n\t\t\t\t\t\tvalue={value}\n\t\t\t\t\t\taria-invalid={ariaInvalid}\n\t\t\t\t\t\taria-describedby={ariaDescribedBy}\n\t\t\t\t\t\taria-errormessage={ariaDescribedBy}\n\t\t\t\t\t\t{...props}\n\t\t\t\t\t/>\n\t\t\t\t)}\n\n\t\t\t\t{ariaInvalid && <ExclamationCircleIcon className=\"absolute bottom-3 right-2 w-6 h-6 text-red-600\" />}\n\t\t\t</div>\n\t\t\t{help && helpElement}\n\t\t</div>\n\t);\n};\n\nfunction isMultilineTextField(\n\tobject: SoSinglelineTextFieldProps | SoMultilineTextFieldProps\n): object is SoMultilineTextFieldProps {\n\treturn object.multiline;\n}\n"],"names":["ExclamationCircleIcon","title","titleId","props","svgRef","React.createElement","ForwardRef","React.forwardRef","ExclamationCircleIcon$1","SoTextField","id","label","className","inputClassName","labelClassName","labelHidden","optionalLabelHidden","value","size","block","error","help","iconLeft","multiline","inputProps","ariaInvalid","ariaDescribedBy","fieldWrapperClasses","classNames","labelClasses","inputWrapperClasses","inputClasses","helpClasses","labelElement","jsxs","jsx","helpElement","isMultilineTextField","object"],"mappings":"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","x_google_ignoreList":[0]}