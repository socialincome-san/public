generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["views"]
  binaryTargets   = ["native", "linux-musl"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String                @id @default(cuid()) @map("id")
  email                String                @unique @map("email")
  authUserId           String?               @unique @map("auth_user_id")
  firstName            String                @map("first_name")
  lastName             String                @map("last_name")
  gender               Gender                @default(private) @map("gender")
  phone                String?               @map("phone")
  company              String?               @map("company")
  referral             UserReferralSource?   @map("referral")
  paymentReferenceId   String?               @map("payment_reference_id")
  stripeCustomerId     String?               @map("stripe_customer_id")
  institution          Boolean               @default(false) @map("institution")
  language             LanguageCode?         @map("language")
  currency             String?               @map("currency")
  addressStreet        String?               @map("address_street")
  addressNumber        String?               @map("address_number")
  addressCity          String?               @map("address_city")
  addressZip           Int?                  @map("address_zip")
  addressCountry       String?               @map("address_country")
  role                 UserRole              @default(user) @map("role")
  organizationId       String?               @map("organization_id")
  birthDate            DateTime?             @map("birth_date") @db.Date
  communicationPhone   String?               @map("communication_phone")
  mobileMoneyPhone     String?               @map("mobile_money_phone")
  hasWhatsAppComm      Boolean?              @map("has_whatsapp_comm")
  hasWhatsAppMobile    Boolean?              @map("has_whatsapp_mobile")
  whatsappActivated    Boolean?              @map("whatsapp_activated")
  instaHandle          String?               @map("insta_handle")
  twitterHandle        String?               @map("twitter_handle")
  profession           String?               @map("profession")
  callingName          String?               @map("calling_name")
  omUid                Int?                  @map("om_uid")
  createdAt            DateTime              @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt            DateTime?             @updatedAt @map("updated_at") @db.Timestamptz(3)
  contributor          Contributor?
  localPartner         LocalPartner?
  recipient            Recipient?
  donationCertificates DonationCertificate[]
  organization         Organization?         @relation(fields: [organizationId], references: [id])

  @@map("user")
}

model Contributor {
  id            String         @id @default(cuid()) @map("id")
  userId        String         @unique @map("user_id")
  createdAt     DateTime       @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt     DateTime?      @updatedAt @map("updated_at") @db.Timestamptz(3)
  contributions Contribution[]
  user          User           @relation(fields: [userId], references: [id])

  @@map("contributor")
}

model Contribution {
  id              String                @id @default(cuid()) @map("id")
  amount          Float                 @map("amount")
  amountChf       Float                 @map("amount_chf")
  feesChf         Float                 @map("fees_chf")
  frequency       String                @map("frequency")
  interval        ContributionInterval  @default(one_time) @map("contribution_interval")
  source          ContributionSource    @map("source")
  status          ContributionStatus    @map("status")
  currency        String                @map("currency")
  referenceId     String                @map("reference_id")
  transactionId   String?               @map("transaction_id")
  rawContent      String?               @map("raw_content")
  contributorId   String                @map("contributor_id")
  campaignId      String?               @map("campaign_id")
  programId       String?               @map("program_id")
  createdAt       DateTime              @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt       DateTime?             @updatedAt @map("updated_at") @db.Timestamptz(3)
  campaign        Campaign?             @relation(fields: [campaignId], references: [id])
  contributor     Contributor           @relation(fields: [contributorId], references: [id])
  program         Program?              @relation(fields: [programId], references: [id])

  @@map("contribution")
}

model Campaign {
  id                     String         @id @default(cuid()) @map("id")
  title                  String         @map("title")
  description            String         @map("description")
  secondDescriptionTitle String?        @map("second_description_title")
  secondDescription      String?        @map("second_description")
  thirdDescriptionTitle  String?        @map("third_description_title")
  thirdDescription       String?        @map("third_description")
  linkWebsite            String?        @map("link_website")
  linkInstagram          String?        @map("link_instagram")
  linkTiktok             String?        @map("link_tiktok")
  linkFacebook           String?        @map("link_facebook")
  linkX                  String?        @map("link_x")
  goal                   Float?         @map("goal")
  currency               String?        @map("currency")
  additionalAmountChf    Float?         @map("additional_amount_chf")
  endDate                DateTime       @map("end_date")
  isActive               Boolean        @default(false) @map("is_active")
  public                 Boolean?       @map("public")
  featured               Boolean?       @map("featured")
  slug                   String?        @map("slug")
  metadataDescription    String?        @map("metadata_description")
  metadataOgImage        String?        @map("metadata_og_image")
  metadataTwitterImage   String?        @map("metadata_twitter_image")
  creatorName            String?        @map("creator_name")
  creatorEmail           String?        @map("creator_email")
  programId              String?        @map("program_id")
  createdAt              DateTime       @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt              DateTime?      @updatedAt @map("updated_at") @db.Timestamptz(3)
  program                Program?       @relation(fields: [programId], references: [id])
  contributions          Contribution[]

  @@map("campaign")
}

model Organization {
  id               String         @id @default(cuid()) @map("id")
  name             String         @unique @map("name")
  operatedPrograms Program[]      @relation("ProgramOperators")
  viewedPrograms   Program[]      @relation("ProgramViewers")
  recipients       Recipient[]
  users            User[]
  createdAt        DateTime       @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt        DateTime?      @updatedAt @map("updated_at") @db.Timestamptz(3)

  @@map("organization")
}

model Program {
  id                     String          @id @default(cuid()) @map("id")
  name                   String          @unique @map("name")
  totalPayments          Int             @map("total_payments") @default(36)
  payoutAmount           Float           @map("payout_amount") @default(700)
  payoutCurrency         String          @map("payout_currency") @default("SLE")
  payoutInterval         PayoutInterval  @map("payout_interval") @default(monthly)
  viewerOrganizationId   String          @map("viewer_organization_id")
  operatorOrganizationId String          @map("operator_organization_id")
  viewerOrganization     Organization    @relation("ProgramViewers", fields: [viewerOrganizationId], references: [id])
  operatorOrganization   Organization    @relation("ProgramOperators", fields: [operatorOrganizationId], references: [id])
  campaigns              Campaign[]
  recipients             Recipient[]
  contributions          Contribution[]
  surveys                Survey[]
  createdAt              DateTime        @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt              DateTime?       @updatedAt @map("updated_at") @db.Timestamptz(3)

  @@map("program")
}

model Recipient {
  id             String          @id @default(cuid()) @map("id")
  userId         String          @unique @map("user_id")
  organizationId String          @map("organization_id")
  programId      String          @map("program_id")
  localPartnerId String          @map("local_partner_id")
  startDate      DateTime?       @map("start_date") @db.Timestamptz(3)
  status         RecipientStatus @map("status")
  createdAt      DateTime        @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt      DateTime?       @updatedAt @map("updated_at") @db.Timestamptz(3)
  payouts        Payout[]
  localPartner   LocalPartner    @relation(fields: [localPartnerId], references: [id])
  organization   Organization    @relation(fields: [organizationId], references: [id])
  program        Program         @relation(fields: [programId], references: [id])
  user           User            @relation(fields: [userId], references: [id])
  surveys        Survey[]

  @@map("recipient")
}

model LocalPartner {
  id         String      @id @default(cuid()) @map("id")
  name       String      @unique @map("name")
  userId     String      @unique @map("user_id")
  createdAt  DateTime    @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt  DateTime?   @updatedAt @map("updated_at") @db.Timestamptz(3)
  user       User        @relation(fields: [userId], references: [id])
  recipients Recipient[]

  @@map("local_partner")
}

model Payout {
  id          String       @id @default(cuid()) @map("id")
  amount      Float        @map("amount")
  amountChf   Float?       @map("amount_chf")
  currency    String       @map("currency")
  paymentAt   DateTime     @map("payment_at") @db.Timestamptz(3)
  status      PayoutStatus @map("status")
  phoneNumber String?      @map("phone_number")
  comments    String?      @map("comments")
  message     String?      @map("message")
  recipientId String       @map("recipient_id")
  createdAt   DateTime     @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt   DateTime?    @updatedAt @map("updated_at") @db.Timestamptz(3)
  recipient   Recipient    @relation(fields: [recipientId], references: [id])

  @@map("payout")
}

model Survey {
  id            String                @id @default(cuid()) @map("id")
  recipientId   String                @map("recipient_id")
  recipient     Recipient             @relation(fields: [recipientId], references: [id])
  questionnaire SurveyQuestionnaire   @map("questionnaire")
  recipientName String                @map("recipient_name")
  language      RecipientMainLanguage @map("language")
  dueDateAt     DateTime              @map("due_date_at")
  sentAt        DateTime?             @map("sent_at")
  completedAt   DateTime?             @map("completed_at")
  status        SurveyStatus          @map("status")
  comments      String?               @map("comments")
  data          String                @map("data")
  accessEmail   String                @map("access_email")
  accessPw      String                @map("access_pw")
  accessToken   String                @map("access_token")
  programId     String?               @map("program_id")
  program       Program?              @relation(fields: [programId], references: [id])
  createdAt     DateTime              @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt     DateTime?             @updatedAt @map("updated_at") @db.Timestamptz(3)

  @@map("survey")
}

model ExchangeRateCollection {
  id        String             @id @default(cuid()) @map("id")
  base      String             @map("base")
  timestamp DateTime           @map("timestamp")
  createdAt DateTime           @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt DateTime?          @updatedAt @map("updated_at") @db.Timestamptz(3)
  items     ExchangeRateItem[] @relation("CollectionToItems")

  @@map("exchange_rate_collection")
}

model ExchangeRateItem {
  id           String                 @id @default(cuid()) @map("id")
  currency     String                 @map("currency")
  rate         Float                  @map("rate")
  collectionId String                 @map("collection_id")
  createdAt    DateTime               @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt    DateTime?              @updatedAt @map("updated_at") @db.Timestamptz(3)
  collection   ExchangeRateCollection @relation("CollectionToItems", fields: [collectionId], references: [id])

  @@map("exchange_rate_item")
}

model DonationCertificate {
  id          String   @id @default(cuid()) @map("id")
  userId      String   @map("user_id")
  country     String   @map("country")
  year        Int      @map("year")
  storagePath String   @map("storage_path")
  user        User     @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt   DateTime @updatedAt @map("updated_at") @db.Timestamptz(3)

  @@unique([userId, year])
  @@map("donation_certificate")
}

model Expense {
  id         String      @id @default(cuid()) @map("id")
  type       ExpenseType @map("type")
  year       Int         @map("year")
  amountChf  Float       @map("amount_chf")
  createdAt  DateTime    @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt  DateTime?   @updatedAt @map("updated_at") @db.Timestamptz(3)

  @@map("expense")
}

enum UserRole {
  user
  globalAdmin
  globalAnalyst
}

enum Gender {
  male
  female
  other
  private
}

enum UserReferralSource {
  familyfriends
  work
  socialmedia
  media
  presentation
  other
}

enum LanguageCode {
  en
  de
  it
  fr
  kri
}

enum RecipientStatus {
  active
  suspended
  waitlisted
  designated
  former
}

enum ContributionSource {
  benevity
  cash
  raisenow
  stripe
  wire_transfer
}

enum ContributionInterval {
  one_time
  monthly
  quarterly
  annually
}

enum ContributionStatus {
  failed
  pending
  succeeded
  unknown
}

enum PayoutStatus {
  created
  paid
  confirmed
  contested
  failed
  other
}

enum SurveyStatus {
  new
  sent
  scheduled
  in_progress
  completed
  missed
}

enum SurveyQuestionnaire {
  onboarding
  checkin
  offboarding
  offboarded_checkin
}

enum RecipientMainLanguage {
  kri
  en
}

enum ExpenseType {
  account_fees
  administrative
  delivery_fees
  donation_fees
  exchange_rate_loss
  fundraising_advertising
  staff
}

enum PayoutInterval {
  monthly
}

view ContributionStatistics {
  id                                    Int    @id @map("id")
  totalContributionsCount               Int?   @map("total_contributions_count")
  totalContributionsAmount              Float? @map("total_contributions_amount")
  totalContributorsCount                Int?   @map("total_contributors_count")
  totalIndividualContributionsAmount    Float? @map("total_individual_contributions_amount")
  totalIndividualContributorsCount      Int?   @map("total_individual_contributors_count")
  totalInstitutionalContributionsAmount Float? @map("total_institutional_contributions_amount")
  totalInstitutionalContributorsCount   Int?   @map("total_institutional_contributors_count")
  totalContributionsByCurrency          Json?  @map("total_contributions_by_currency")
  totalContributionsByIsInstitution     Json?  @map("total_contributions_by_is_institution")
  totalContributionsByCountry           Json?  @map("total_contributions_by_country")
  totalContributionsBySource            Json?  @map("total_contributions_by_source")
  totalContributionsByMonth             Json?  @map("total_contributions_by_month")
  totalContributionsByMonthAndType      Json?  @map("total_contributions_by_month_and_type")
  totalPaymentFeesByIsInstitution       Json?  @map("total_payment_fees_by_is_institution")

  @@map("contribution_statistics")
}
