generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["views"]
  binaryTargets   = ["native", "linux-musl"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String        @id @default(cuid()) @map("id")
  email       String        @unique @map("email")
  authUserId  String?       @unique @map("auth_user_id")
  firstName   String        @map("first_name")
  lastName    String        @map("last_name")
  gender      Gender        @default(private) @map("gender")
  language    LanguageCode? @map("language")
  currency    Currency?     @map("currency")
  dateOfBirth DateTime?     @map("date_of_birth") @db.Date
  Contributor Contributor?
  Recipient   Recipient?
  PortalUser  PortalUser?

  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt DateTime? @updatedAt @map("updated_at") @db.Timestamptz(3)

  Address       Address[]
  LocalPartner  LocalPartner?
  PhoneNumber   PhoneNumber[]
  ProgramAccess ProgramAccess[]

  @@map("user")
}

enum PortalAccessLevel {
  admin
  editor
  viewer
}

model PortalAccess {
  id             String            @id @default(cuid()) @map("id")
  portalUserId   String            @unique @map("portal_user_id")
  organizationId String            @map("organization")
  accessLevel    PortalAccessLevel @map("access_level")

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz(3)

  portalUser   PortalUser   @relation(fields: [portalUserId], references: [id])
  organization Organization @relation(fields: [organizationId], references: [id])

  @@map("portal_access")
}

model PortalUser {
  id     String @id @default(cuid()) @map("id")
  userId String @unique @map("user_id")
  user   User   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz(3)

  PortalAccess  PortalAccess[]
  ProgramAccess ProgramAccess[]

  @@map("portal_user")
}

enum WhatsAppStatus {
  disabled
  pending
  verified
}

model Contributor {
  id                   String                @id @default(cuid()) @map("id")
  userId               String                @unique @map("user_id")
  user                 User                  @relation(fields: [userId], references: [id])
  referral             UserReferralSource?   @map("referral")
  paymentReferenceId   String?               @map("payment_reference_id")
  stripeCustomerId     String?               @map("stripe_customer_id")
  institution          Boolean               @default(false) @map("institution")
  createdAt            DateTime              @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt            DateTime?             @updatedAt @map("updated_at") @db.Timestamptz(3)
  contributions        Contribution[]
  donationCertificates DonationCertificate[]
  localPartnerId       String?
  localPartner         LocalPartner?         @relation(fields: [localPartnerId], references: [id])

  @@map("contributor")
}

model Recipient {
  id             String          @id @default(cuid()) @map("id")
  userId         String          @unique @map("user_id")
  programId      String          @map("program_id")
  localPartnerId String          @map("local_partner_id")
  localPartner   LocalPartner    @relation(fields: [localPartnerId], references: [id])
  startDate      DateTime?       @map("start_date") @db.Timestamptz(3)
  status         RecipientStatus @map("status")
  createdAt      DateTime        @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt      DateTime?       @updatedAt @map("updated_at") @db.Timestamptz(3)
  omUid          Int?            @map("om_uid")
  profession     String?         @map("profession")
  callingName    String?         @map("calling_name")
  program        Program         @relation(fields: [programId], references: [id])
  user           User            @relation(fields: [userId], references: [id])
  payouts        Payout[]
  surveys        Survey[]

  @@map("recipient")
}

// A user can have multiple phone numbers, but only one primary number (constraint needed at application level)
model PhoneNumber {
  id        String         @id @default(cuid()) @map("id")
  userId    String         @map("user_id")
  phone     String         @map("phone")
  type      String         @map("type")
  verified  Boolean        @default(false) @map("verified")
  whatsApp  WhatsAppStatus @default(disabled) @map("whats_app")
  isPrimary Boolean        @default(false) @map("is_primary")
  createdAt DateTime       @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt DateTime       @updatedAt @map("updated_at") @db.Timestamptz(3)
  user      User           @relation(fields: [userId], references: [id])

  // Ensure a user cannot have duplicate phone numbers
  @@unique([userId, phone])
  @@map("phone_number")
}

model Address {
  id        String   @id @default(cuid()) @map("id")
  street    String   @map("street")
  number    String   @map("number")
  city      String   @map("city")
  zip       Int      @map("zip")
  country   String   @map("country")
  userId    String   @unique @map("user_id")
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz(3)

  @@map("address")
}

enum ProgramAccessLevel {
  admin
  editor
  viewer
}

model ProgramAccess {
  id           String             @id @default(cuid()) @map("id")
  portalUserId String             @map("portal_user_id")
  programId    String             @map("program_id")
  accessLevel  ProgramAccessLevel @map("access_level")

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz(3)

  program    Program    @relation(fields: [programId], references: [id])
  PortalUser PortalUser @relation(fields: [portalUserId], references: [id])
  User       User?      @relation(fields: [userId], references: [id])
  userId     String?

  @@unique([portalUserId, programId])
  @@map("program_access")
}

model StripeContribution {
  id             String       @id @default(cuid()) @map("id")
  stripeEventId  String       @unique @map("stripe_event_id")
  contributionId String       @unique @map("contribution_id")
  contribution   Contribution @relation(fields: [contributionId], references: [id])
  createdAt      DateTime     @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt      DateTime?    @updatedAt @map("updated_at") @db.Timestamptz(3)

  @@map("stripe_contribution")
}

model BankTransferContribution {
  id             String       @id @default(cuid()) @map("id")
  referenceId    String       @unique @map("reference_id")
  contributionId String       @unique @map("contribution_id")
  contribution   Contribution @relation(fields: [contributionId], references: [id])
  createdAt      DateTime     @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt      DateTime?    @updatedAt @map("updated_at") @db.Timestamptz(3)

  @@map("bank_transfer_contribution")
}

model Contribution {
  id                       String                    @id @default(cuid()) @map("id")
  amount                   Float                     @map("amount")
  amountChf                Float                     @map("amount_chf")
  feesChf                  Float                     @map("fees_chf")
  contributionInterval     ContributionInterval      @default(one_time) @map("contribution_interval")
  source                   ContributionSource        @map("source")
  status                   ContributionStatus        @map("status")
  currency                 Currency                  @map("currency")
  referenceId              String                    @map("reference_id")
  transactionId            String?                   @map("transaction_id")
  rawContent               String?                   @map("raw_content")
  contributorId            String                    @map("contributor_id")
  campaignId               String?                   @map("campaign_id")
  programId                String?                   @map("program_id")
  createdAt                DateTime                  @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt                DateTime?                 @updatedAt @map("updated_at") @db.Timestamptz(3)
  campaign                 Campaign?                 @relation(fields: [campaignId], references: [id])
  contributor              Contributor               @relation(fields: [contributorId], references: [id])
  Program                  Program?                  @relation(fields: [programId], references: [id])
  StripeContribution       StripeContribution?
  BankTransferContribution BankTransferContribution?

  @@map("contribution")
}

model Campaign {
  id                     String         @id @default(cuid()) @map("id")
  title                  String         @map("title")
  description            String         @map("description")
  secondDescriptionTitle String?        @map("second_description_title")
  secondDescription      String?        @map("second_description")
  thirdDescriptionTitle  String?        @map("third_description_title")
  thirdDescription       String?        @map("third_description")
  linkWebsite            String?        @map("link_website")
  linkInstagram          String?        @map("link_instagram")
  linkTiktok             String?        @map("link_tiktok")
  linkFacebook           String?        @map("link_facebook")
  linkX                  String?        @map("link_x")
  goal                   Float?         @map("goal")
  currency               String?        @map("currency")
  additionalAmountChf    Float?         @map("additional_amount_chf")
  endDate                DateTime       @map("end_date")
  isActive               Boolean        @default(false) @map("is_active")
  public                 Boolean?       @map("public")
  featured               Boolean?       @map("featured")
  slug                   String?        @map("slug")
  metadataDescription    String?        @map("metadata_description")
  metadataOgImage        String?        @map("metadata_og_image")
  metadataTwitterImage   String?        @map("metadata_twitter_image")
  creatorName            String?        @map("creator_name")
  creatorEmail           String?        @map("creator_email")
  programId              String?        @map("program_id")
  createdAt              DateTime       @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt              DateTime?      @updatedAt @map("updated_at") @db.Timestamptz(3)
  program                Program?       @relation(fields: [programId], references: [id])
  contributions          Contribution[]

  @@map("campaign")
}

model Organization {
  id               String         @id @default(cuid()) @map("id")
  name             String         @unique @map("name")
  operatedPrograms Program[]      @relation("ProgramOperators")
  viewedPrograms   Program[]      @relation("ProgramViewers")
  createdAt        DateTime       @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt        DateTime?      @updatedAt @map("updated_at") @db.Timestamptz(3)
  PortalAccess     PortalAccess[]

  @@map("organization")
}

model Program {
  id                     String          @id @default(cuid()) @map("id")
  name                   String          @unique @map("name")
  totalPayments          Int             @map("total_payments")
  payoutAmount           Float           @map("payout_amount")
  payoutCurrency         Currency        @default(SLE) @map("payout_currency")
  payoutInterval         PayoutInterval  @default(monthly) @map("payout_interval")
  country                String          @default("Sierra Leone") @map("country")
  viewerOrganizationId   String          @map("viewer_organization_id")
  operatorOrganizationId String          @map("operator_organization_id")
  owner                  Organization    @relation("ProgramViewers", fields: [viewerOrganizationId], references: [id])
  operator               Organization    @relation("ProgramOperators", fields: [operatorOrganizationId], references: [id])
  campaigns              Campaign[]
  recipients             Recipient[]
  contributions          Contribution[]
  surveys                Survey[]
  createdAt              DateTime        @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt              DateTime?       @updatedAt @map("updated_at") @db.Timestamptz(3)
  ProgramAccess          ProgramAccess[]

  @@map("program")
}

model LocalPartner {
  id          String        @id @default(cuid()) @map("id")
  name        String        @unique @map("name")
  userId      String        @unique @map("user_id")
  createdAt   DateTime      @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt   DateTime?     @updatedAt @map("updated_at") @db.Timestamptz(3)
  user        User          @relation(fields: [userId], references: [id])
  recipients  Recipient[]
  Contributor Contributor[]

  @@map("local_partner")
}

model Payout {
  id          String       @id @default(cuid()) @map("id")
  amount      Float        @map("amount")
  amountChf   Float?       @map("amount_chf")
  currency    String       @map("currency")
  paymentAt   DateTime     @map("payment_at") @db.Timestamptz(3)
  status      PayoutStatus @map("status")
  phoneNumber String?      @map("phone_number")
  comments    String?      @map("comments")
  message     String?      @map("message")
  recipientId String       @map("recipient_id")
  createdAt   DateTime     @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt   DateTime?    @updatedAt @map("updated_at") @db.Timestamptz(3)
  recipient   Recipient    @relation(fields: [recipientId], references: [id])

  @@map("payout")
}

model Survey {
  id            String                @id @default(cuid()) @map("id")
  recipientId   String                @map("recipient_id")
  recipient     Recipient             @relation(fields: [recipientId], references: [id])
  questionnaire SurveyQuestionnaire   @map("questionnaire")
  recipientName String                @map("recipient_name")
  language      RecipientMainLanguage @map("language")
  dueDateAt     DateTime              @map("due_date_at")
  sentAt        DateTime?             @map("sent_at")
  completedAt   DateTime?             @map("completed_at")
  status        SurveyStatus          @map("status")
  comments      String?               @map("comments")
  data          String                @map("data")
  accessEmail   String                @map("access_email")
  accessPw      String                @map("access_pw")
  accessToken   String                @map("access_token")
  programId     String?               @map("program_id")
  program       Program?              @relation(fields: [programId], references: [id])
  createdAt     DateTime              @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt     DateTime?             @updatedAt @map("updated_at") @db.Timestamptz(3)

  @@map("survey")
}

model ExchangeRateCollection {
  id        String             @id @default(cuid()) @map("id")
  base      String             @map("base")
  timestamp DateTime           @map("timestamp")
  createdAt DateTime           @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt DateTime?          @updatedAt @map("updated_at") @db.Timestamptz(3)
  items     ExchangeRateItem[] @relation("CollectionToItems")

  @@map("exchange_rate_collection")
}

model ExchangeRateItem {
  id           String                 @id @default(cuid()) @map("id")
  currency     String                 @map("currency")
  rate         Float                  @map("rate")
  collectionId String                 @map("collection_id")
  createdAt    DateTime               @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt    DateTime?              @updatedAt @map("updated_at") @db.Timestamptz(3)
  collection   ExchangeRateCollection @relation("CollectionToItems", fields: [collectionId], references: [id])

  @@map("exchange_rate_item")
}

model DonationCertificate {
  id            String @id @default(cuid()) @map("id")
  contributorId String @map("contributor_id")
  country       String @map("country")
  year          Int    @map("year")
  storagePath   String @map("storage_path")

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz(3)

  contributor Contributor @relation(fields: [contributorId], references: [id])

  @@unique([contributorId, year])
  @@map("donation_certificate")
}

model Expense {
  id        String      @id @default(cuid()) @map("id")
  type      ExpenseType @map("type")
  year      Int         @map("year")
  amountChf Float       @map("amount_chf")

  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt DateTime? @updatedAt @map("updated_at") @db.Timestamptz(3)

  @@map("expense")
}

enum Gender {
  male
  female
  other
  private
}

enum UserReferralSource {
  familyfriends
  work
  socialmedia
  media
  presentation
  other
}

enum LanguageCode {
  en
  de
  it
  fr
  kri
}

enum Currency {
  SLE
  CHF
  EUR
  USD
  GBP
}

enum RecipientStatus {
  active
  suspended
  waitlisted
  designated
  former
}

enum ContributionSource {
  benevity
  cash
  raisenow
  stripe
  wire_transfer
}

enum ContributionInterval {
  one_time
  monthly
  quarterly
  annually
}

enum ContributionStatus {
  failed
  pending
  succeeded
  unknown
}

enum PayoutStatus {
  created
  paid
  confirmed
  contested
  failed
  other
}

enum SurveyStatus {
  new
  sent
  scheduled
  in_progress
  completed
  missed
}

enum SurveyQuestionnaire {
  onboarding
  checkin
  offboarding
  offboarded_checkin
}

enum RecipientMainLanguage {
  kri
  en
}

enum ExpenseType {
  account_fees
  administrative
  delivery_fees
  donation_fees
  exchange_rate_loss
  fundraising_advertising
  staff
}

enum PayoutInterval {
  monthly
}
