generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["views"]
  binaryTargets   = ["native", "linux-musl"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Gender {
  male
  female
  other
  private
}

model User {
  id          String    @id @default(cuid()) @map("id")
  email       String    @unique @map("email")
  authUserId  String?   @unique @map("auth_user_id")
  firstName   String    @map("first_name")
  lastName    String    @map("last_name")
  gender      Gender    @default(private) @map("gender")
  addressId   String?   @unique @map("address_id")
  address     Address?  @relation(fields: [addressId], references: [id], onDelete: Cascade)
  phones      Phone[]
  language    String?   @map("language")
  dateOfBirth DateTime? @map("date_of_birth") @db.Date

  contributor Contributor?
  recipient   Recipient?
  portalUser  PortalUser?

  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt DateTime? @updatedAt @map("updated_at") @db.Timestamptz(3)

  @@map("user")
}

model OrganizationAccess {
  id             String       @id @default(cuid())
  portalUserId   String
  portalUser     PortalUser   @relation(fields: [portalUserId], references: [id], onDelete: Cascade)
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  permissions OrganizationPermission[]

  grantedBy String?
  grantedAt DateTime  @default(now())
  expiresAt DateTime?

  @@unique([portalUserId, organizationId])
  @@index([portalUserId])
  @@index([organizationId])
  @@map("organization_access")
}

enum OrganizationPermission {
  admin // full access
  audit // view only access
  // more granular permissions can be added later if needed
}

model ProgramAccess {
  id           String     @id @default(cuid())
  portalUserId String
  portalUser   PortalUser @relation(fields: [portalUserId], references: [id], onDelete: Cascade)
  programId    String
  program      Program    @relation(fields: [programId], references: [id], onDelete: Cascade)

  permissions ProgramPermission[]

  @@unique([portalUserId, programId])
  @@map("program_access")
}

enum ProgramPermission {
  admin // full access
  audit // view only access
  // more granular permissions can be added later if needed
}

model PortalUser {
  id                 String               @id @default(cuid()) @map("id")
  userId             String               @unique @map("user_id")
  user               User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  organizationAccess OrganizationAccess[]
  programAccess      ProgramAccess[]

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz(3)

  @@map("portal_user")
}

enum UserReferralSource {
  family_and_friends
  work
  social_media
  media
  presentation
  other
}

model Contributor {
  id                   String                @id @default(cuid()) @map("id")
  userId               String                @unique @map("user_id")
  user                 User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  referral             UserReferralSource?   @map("referral")
  paymentReferenceId   String?               @map("payment_reference_id")
  stripeCustomerId     String?               @map("stripe_customer_id")
  institution          Boolean               @default(false) @map("institution")
  contributions        Contribution[]
  donationCertificates DonationCertificate[]

  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt DateTime? @updatedAt @map("updated_at") @db.Timestamptz(3)

  @@map("contributor")
}

enum RecipientStatus {
  active
  suspended
  waitlisted
  former
}

model Recipient {
  id             String          @id @default(cuid()) @map("id")
  userId         String          @unique @map("user_id")
  user           User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  startDate      DateTime?       @map("start_date") @db.Timestamptz(3)
  status         RecipientStatus @map("status")
  profession     String?         @map("profession")
  callingName    String?         @map("calling_name")
  language       String?         @map("language")
  programId      String          @map("program_id")
  program        Program         @relation(fields: [programId], references: [id], onDelete: Cascade)
  localPartnerId String          @map("local_partner_id")
  localPartner   LocalPartner    @relation(fields: [localPartnerId], references: [id])
  payouts        Payout[]
  surveys        Survey[]
  // Payment details
  omUid          Int?            @map("om_uid")
  paymentPhoneId String          @map("payment_phone_id")
  paymentPhone   Phone           @relation(fields: [paymentPhoneId], references: [id])

  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt DateTime? @updatedAt @map("updated_at") @db.Timestamptz(3)

  @@map("recipient")
}

enum PhoneType {
  mobile
  home
  work
  other
}

enum WhatsAppStatus {
  disabled
  pending
  verified
}

// A user can have multiple phone numbers, but only one primary number (constraint needed at application level)
model Phone {
  id         String         @id @default(cuid()) @map("id")
  type       PhoneType      @map("type")
  number     String         @map("number")
  verified   Boolean        @default(false) @map("verified")
  whatsApp   WhatsAppStatus @default(disabled) @map("whats_app")
  isPrimary  Boolean        @default(false) @map("is_primary")
  userId     String         @map("user_id")
  user       User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  recipients Recipient[]

  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz(3)
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(3)

  // Ensure a user cannot have duplicate phone numbers
  @@unique([userId, number])
  @@map("phone")
}

model Address {
  id      String @id @default(cuid()) @map("id")
  street  String @map("street")
  number  String @map("number")
  city    String @map("city")
  zip     String @map("zip")
  country String @map("country")
  users   User[]

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz(3)

  @@map("address")
}

enum PaymentEventType {
  stripe
  bank_transfer
}

model PaymentEvent {
  id             String           @id @default(cuid()) @map("id")
  contributionId String           @unique @map("contribution_id")
  contribution   Contribution     @relation(fields: [contributionId], references: [id], onDelete: Cascade)
  type           PaymentEventType @map("type")
  transactionId  String?          @map("transaction_id")
  metadata       Json?            @map("metadata")

  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt DateTime? @updatedAt @map("updated_at") @db.Timestamptz(3)

  @@map("payment_event")
}

enum ContributionStatus {
  failed
  pending
  succeeded
}

model Contribution {
  id            String             @id @default(cuid()) @map("id")
  amount        Decimal            @map("amount") @db.Decimal(10, 2)
  currency      String             @map("currency")
  amountChf     Decimal            @map("amount_chf") @db.Decimal(10, 2)
  feesChf       Decimal            @map("fees_chf") @db.Decimal(10, 2)
  contributorId String             @map("contributor_id")
  contributor   Contributor        @relation(fields: [contributorId], references: [id], onDelete: Cascade)
  status        ContributionStatus @map("status")
  campaignId    String             @map("campaign_id")
  campaign      Campaign           @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  paymentEvent  PaymentEvent?

  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt DateTime? @updatedAt @map("updated_at") @db.Timestamptz(3)

  @@map("contribution")
}

model Campaign {
  id                     String         @id @default(cuid()) @map("id")
  title                  String         @map("title")
  description            String         @map("description")
  secondDescriptionTitle String?        @map("second_description_title")
  secondDescription      String?        @map("second_description")
  thirdDescriptionTitle  String?        @map("third_description_title")
  thirdDescription       String?        @map("third_description")
  linkWebsite            String?        @map("link_website")
  linkInstagram          String?        @map("link_instagram")
  linkTiktok             String?        @map("link_tiktok")
  linkFacebook           String?        @map("link_facebook")
  linkX                  String?        @map("link_x")
  goal                   Decimal?       @map("goal") @db.Decimal(10, 2)
  currency               String         @map("currency")
  additionalAmountChf    Decimal?       @map("additional_amount_chf") @db.Decimal(10, 2)
  endDate                DateTime       @map("end_date")
  isActive               Boolean        @default(false) @map("is_active")
  public                 Boolean?       @map("public")
  featured               Boolean?       @map("featured")
  slug                   String?        @map("slug")
  metadataDescription    String?        @map("metadata_description")
  metadataOgImage        String?        @map("metadata_og_image")
  metadataTwitterImage   String?        @map("metadata_twitter_image")
  creatorName            String?        @map("creator_name")
  creatorEmail           String?        @map("creator_email")
  programId              String?        @map("program_id")
  program                Program?       @relation(fields: [programId], references: [id], onDelete: SetNull)
  organizationId         String         @map("organization_id")
  organization           Organization   @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  contributions          Contribution[]

  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt DateTime? @updatedAt @map("updated_at") @db.Timestamptz(3)

  @@map("campaign")
}

model Organization {
  id               String               @id @default(cuid()) @map("id")
  name             String               @unique @map("name")
  accesses         OrganizationAccess[]
  ownedPrograms    Program[]            @relation("ProgramOwner")
  operatedPrograms Program[]            @relation("ProgramOperator")
  expenses         Expense[]
  campaigns        Campaign[]

  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt DateTime? @updatedAt @map("updated_at") @db.Timestamptz(3)

  @@map("organization")
}

model Program {
  id                     String          @id @default(cuid()) @map("id")
  name                   String          @unique @map("name")
  totalPayments          Int             @map("total_payments")
  payoutAmount           Decimal         @map("payout_amount") @db.Decimal(10, 2)
  payoutCurrency         String          @map("payout_currency")
  payoutInterval         Int             @map("payout_interval") // In days
  country                String          @default("Sierra Leone") @map("country")
  // Owner organization relation
  ownerOrganizationId    String          @map("owner_organization_id")
  owner                  Organization    @relation("ProgramOwner", fields: [ownerOrganizationId], references: [id], onDelete: Cascade)
  // Operator organization relation
  operatorOrganizationId String          @map("operator_organization_id")
  operator               Organization    @relation("ProgramOperator", fields: [operatorOrganizationId], references: [id], onDelete: Cascade)
  campaigns              Campaign[]
  recipients             Recipient[]
  accesses               ProgramAccess[]

  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt DateTime? @updatedAt @map("updated_at") @db.Timestamptz(3)

  @@map("program")
}

model LocalPartner {
  id         String      @id @default(cuid()) @map("id")
  name       String      @unique @map("name")
  recipients Recipient[]

  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt DateTime? @updatedAt @map("updated_at") @db.Timestamptz(3)

  @@map("local_partner")
}

enum PayoutStatus {
  created
  paid
  confirmed
  contested
  failed
  other
}

model Payout {
  id          String       @id @default(cuid()) @map("id")
  amount      Decimal      @map("amount") @db.Decimal(10, 2)
  amountChf   Decimal?     @map("amount_chf")
  currency    String       @map("currency")
  paymentAt   DateTime     @map("payment_at") @db.Timestamptz(3)
  status      PayoutStatus @map("status")
  phoneNumber String?      @map("phone_number")
  comments    String?      @map("comments")
  message     String?      @map("message")
  recipientId String       @map("recipient_id")
  recipient   Recipient    @relation(fields: [recipientId], references: [id], onDelete: Cascade)

  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt DateTime? @updatedAt @map("updated_at") @db.Timestamptz(3)

  @@map("payout")
}

enum SurveyStatus {
  new
  sent
  scheduled
  in_progress
  completed
  missed
}

enum SurveyQuestionnaire {
  onboarding
  checkin
  offboarding
  offboarded_checkin
}

model Survey {
  id            String              @id @default(cuid()) @map("id")
  recipientId   String              @map("recipient_id")
  recipient     Recipient           @relation(fields: [recipientId], references: [id], onDelete: Cascade)
  questionnaire SurveyQuestionnaire @map("questionnaire")
  language      String              @map("language")
  dueAt         DateTime            @map("due_at")
  sentAt        DateTime?           @map("sent_at")
  completedAt   DateTime?           @map("completed_at")
  status        SurveyStatus        @map("status")
  comments      String?             @map("comments")
  data          Json                @map("data")
  accessEmail   String              @map("access_email")
  accessPw      String              @map("access_pw")
  accessToken   String              @map("access_token")

  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt DateTime? @updatedAt @map("updated_at") @db.Timestamptz(3)

  @@map("survey")
}

model ExchangeRate {
  id       String  @id @default(cuid()) @map("id")
  currency String  @map("currency")
  rate     Decimal @map("rate") @db.Decimal(10, 2)

  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt DateTime? @updatedAt @map("updated_at") @db.Timestamptz(3)

  @@map("exchange_rate")
}

model DonationCertificate {
  id            String      @id @default(cuid()) @map("id")
  contributorId String      @map("contributor_id")
  contributor   Contributor @relation(fields: [contributorId], references: [id], onDelete: Cascade)
  year          Int         @map("year")
  storagePath   String      @map("storage_path")

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz(3)

  @@unique([contributorId, year])
  @@map("donation_certificate")
}

enum ExpenseType {
  account_fees
  administrative
  delivery_fees
  donation_fees
  exchange_rate_loss
  fundraising_advertising
  staff
}

model Expense {
  id             String       @id @default(cuid()) @map("id")
  organizationId String       @map("organization_id")
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  type           ExpenseType  @map("type")
  year           Int          @map("year")
  amountChf      Decimal      @map("amount_chf") @db.Decimal(10, 2)

  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt DateTime? @updatedAt @map("updated_at") @db.Timestamptz(3)

  @@map("expense")
}
