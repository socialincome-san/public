// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
  binaryTargets = ["native", "linux-musl"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String        @id @default(cuid())
  firstName      String
  lastName       String
  role           String
  organizationId String?
  organization   Organization? @relation(fields: [organizationId], references: [id])
  contributor    Contributor?
  localPartner   LocalPartner?
  recipient      Recipient?
  createdAt      DateTime      @default(now()) @db.Timestamptz(3)
  updatedAt      DateTime?     @updatedAt @db.Timestamptz(3)

  @@map("user")
}

model Contributor {
  id            String         @id @default(cuid())
  userId        String         @unique
  user          User           @relation(fields: [userId], references: [id])
  contributions Contribution[]
  createdAt     DateTime       @default(now()) @db.Timestamptz(3)
  updatedAt     DateTime?      @updatedAt @db.Timestamptz(3)

  @@map("contributor")
}

model Contribution {
  id             String        @id @default(cuid())
  amount         Float
  frequency      String
  contributorId  String
  campaignId     String?
  organizationId String?
  contributor    Contributor   @relation(fields: [contributorId], references: [id])
  campaign       Campaign?     @relation(fields: [campaignId], references: [id])
  organization   Organization? @relation(fields: [organizationId], references: [id])
  createdAt      DateTime      @default(now()) @db.Timestamptz(3)
  updatedAt      DateTime?     @updatedAt @db.Timestamptz(3)

  @@map("contribution")
}

model Campaign {
  id             String         @id @default(cuid())
  title          String
  description    String
  duration       Int
  goal           Float
  currency       String
  organizationId String?
  programId      String?
  contributions  Contribution[]
  organization   Organization?  @relation(fields: [organizationId], references: [id])
  program        Program?       @relation(fields: [programId], references: [id])
  createdAt      DateTime       @default(now()) @db.Timestamptz(3)
  updatedAt      DateTime?      @updatedAt @db.Timestamptz(3)

  @@map("campaign")
}

model Organization {
  id               String         @id @default(cuid())
  name             String
  users            User[]
  campaigns        Campaign[]
  ownedPrograms    Program[]      @relation("OwnerPrograms")
  operatedPrograms Program[]      @relation("OperatorPrograms")
  recipients       Recipient[]
  contributions    Contribution[]
  createdAt        DateTime       @default(now()) @db.Timestamptz(3)
  updatedAt        DateTime?      @updatedAt @db.Timestamptz(3)

  @@map("organization")
}

model Program {
  id                     String       @id @default(cuid())
  title                  String
  duration               Int
  ownerOrganizationId    String
  operatorOrganizationId String
  owner                  Organization @relation("OwnerPrograms", fields: [ownerOrganizationId], references: [id])
  operator               Organization @relation("OperatorPrograms", fields: [operatorOrganizationId], references: [id])
  campaigns              Campaign[]
  recipients             Recipient[]
  createdAt              DateTime     @default(now()) @db.Timestamptz(3)
  updatedAt              DateTime?    @updatedAt @db.Timestamptz(3)

  @@map("program")
}

model Recipient {
  id                    String       @id @default(cuid())
  userId                String       @unique
  organizationId        String
  programId             String
  localPartnerId        String
  user                  User         @relation(fields: [userId], references: [id])
  organization          Organization @relation(fields: [organizationId], references: [id])
  program               Program      @relation(fields: [programId], references: [id])
  localPartner          LocalPartner @relation(fields: [localPartnerId], references: [userId])
  payout                Payout?
  survey                Survey?
  createdAt             DateTime     @default(now()) @db.Timestamptz(3)
  updatedAt             DateTime?    @updatedAt @db.Timestamptz(3)

  @@map("recipient")
}

model LocalPartner {
  id         String      @id @default(cuid())
  userId     String      @unique
  user       User        @relation(fields: [userId], references: [id])
  recipients Recipient[]
  createdAt  DateTime    @default(now()) @db.Timestamptz(3)
  updatedAt  DateTime?   @updatedAt @db.Timestamptz(3)

  @@map("local_partner")
}

model Payout {
  id          String     @id @default(cuid())
  amount      Float
  currency    String
  recipientId String     @unique
  recipient   Recipient  @relation(fields: [recipientId], references: [id])
  createdAt   DateTime   @default(now()) @db.Timestamptz(3)
  updatedAt   DateTime?  @updatedAt @db.Timestamptz(3)

  @@map("payout")
}

model Survey {
  id          String     @id @default(cuid())
  question    String
  answer      String
  recipientId String     @unique
  recipient   Recipient  @relation(fields: [recipientId], references: [id])
  createdAt   DateTime   @default(now()) @db.Timestamptz(3)
  updatedAt   DateTime?  @updatedAt @db.Timestamptz(3)

  @@map("survey")
}

